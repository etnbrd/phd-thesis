Group       | Model                              | Composition | Encapsulation | Productivity | Synchronization | Message | Efficiency  | Community | Industry | Adoption | Implementations                               
Modular     | Imperative Programming             | 3           | 4             | 3            | 4               | 1       | 1           | 2         | 3        | 2        | Fortran, Algol, Cobol and C
Modular     | Object-Oriented Programming        | 5           | 5             | 5            | 4               | 1       | 1           | 4         | 5        | 4        | C++ \cite{Stroustrup1986}, Java \cite{Gosling2000} and Pascal
Modular     | Functional Programming             | 5           | 5             | 5            | 1               | 4       | 1           | 1         | 2        | 1        | Scheme \cite{Rees1986}, Miranda \cite{Turner1986}, Haskell \cite{Hudak1992} and Standard ML \cite{Milner1997}
Modular     | Multi Paradigm                     | 5           | 5             | 5            | 4               | 1       | 1           | 5         | 5        | 5        | Javacript, Python and Ruby
Concurrent  | Event-driven programming           | 5           | 5             | 5            | 5               | 2       | 2           | 5         | 5        | 5        | TAME \cite{Krohn2007}, Node.js\ftnt{https://nodejs.org/en/} and Vert.X\ftnt{http://vertx.io/}
Concurrent  | Lock-free Data-Structures          | 5           | 5             | 5            | 5               | 2       | 2           | 0         | 2        | 0        | linked list \cite{Valois1995,Timnat2012}, queue \cite{Sundell2003,Wimmer2015}, tree \cite{Ramachandran2015} and stack \cite{Hendler2004}
Concurrent  | Multi-threading programming        | 4           | 4             | 4            | 5               | 1       | 1           | 3         | 5        | 3        | semaphores \cite{Dijkstra}, guarded commands \cite{Dijkstra1975}, guarded region \cite{Hansen1978a} and monitors \cite{Hoare1974}
Concurrent  | Hybrid Models                      | 4           | 4             | 4            | 5               | 1       | 1           | 0         | 0        | 0        | libasync \cite{Dabek2002}, InContext \cite{Yoo2011}, Fibers \cite{Adya2002}, Capriccio \cite{Behren2003a}, Monadic hybrid concurrency \cite{Li2007} and Scala Actors \cite{Haller2007}
Parallel    | Actor Model                        | 2           | 2             | 2            | 5               | 5       | 5           | 1         | 5        | 1        | Erlang \cite{Armstrong1993,Nelson2004,Armstrong2014}, Scala \cite{Odersky2004}, Akka\ftnt{http://akka.io/} and Play\ftnt{https://www.playframework.com/}
Parallel    | Communicating Sequential Processes | 2           | 2             | 2            | 5               | 5       | 5           | 1         | 5        | 1        | Go\ftnt{https://golang.org/}
Distributed | Skeleton                           | 3           | 3             | 3            | 4               | 4       | 4           | 2         | 5        | 2        | MapReduce
Distributed | Service Oriented Architecture      | 2           | 4             | 2            | 4               | 4       | 4           | 3         | 4        | 3        | OSGi\ftnt{https://www.osgi.org/developer/specifications/}, EJB\ftnt{http://www.oracle.com/technetwork/java/javaee/ejb/index.html} and Spring\ftnt{http://projects.spring.io/spring-framework/}
Distributed | Microservices                      | 2           | 4             | 2            | 4               | 4       | 4           | 3         | 3        | 3        | Seneca\ftnt{http://senecajs.org/}
Stream      | Data Stream System Management      | 2           | 3             | 2            | 5               | 5       | 5           | 1         | 4        | 1        | DryadLINQ \cite{Isard2007,Yu2009}, Apache Hive \cite{Thusoo2009}, Timestream \cite{Qian2013}, Shark \cite{Xin2013}
Stream      | Pipeline Stream Processing         | 2           | 3             | 2            | 5               | 5       | 5           | 1         | 5        | 1        | SEDA \cite{Welsh2001}, StreaMIT \cite{Thies2002}, Spidle \cite{Consel2003}, Aspen \cite{Upadhyaya2007}, Pig Latin \cite{Olston2008}, MEDA \cite{Han2009}, CBP \cite{Logothetis2010} and S4 \cite{Neumeyer2010} designed at Yahoo, Piccolo \cite{Power2010}, Comet \cite{He2010}, Nectar \cite{Gunda2010}, SEEP \cite{Migliavacca2010}, Legion \cite{Bauer2012}, Spark Streaming \cite{Zaharia2012a}, Naiad \cite{Murray2013} designed at Microsoft, Millwheel \cite{Akidau2013} designed at Google, Halide \cite{Ragan-Kelley2013}, Storm \cite{Toshniwal2014} by Twitter, SDG \cite{Fernandez2014a}, Regent \cite{Slaughter2015} and Neptune \cite{Buddhika2016}
Compiler    | Polyhedral Compilers               | 2           | 4             | 2            | 5               | 4       | 4           | 0         | 3        | 0        | AlphaZ \cite{Yuki2013}, Polly \cite{Grosser2011} and GRAPHITE \cite{Trifunovic2010}
Compiler    | Annotation Compilers               | 3           | 4             | 3            | 5               | 4       | 4           | 2         | 3        | 2        | OpenMP \cite{Dagum1998}, OpenCL \cite{Stone2010}, CUDA \cite{Nvidia2007}, Cg \cite{Mark2003}, Brook \cite{Buck2004} and Liquid Metal \cite{Huang2008}
Runtime     | Partitioned Global Address Space   | 2           | 4             | 2            | 4               | 4       | 4           | 1         | 3        | 1        | CoArray Fortran \cite{Numrich1998}, X10 \cite{Charles2005}, Unified Parallel C \cite{El-Ghazawi2006}, Chapel\cite{Chamberlain2007}, OpenSHMEM \cite{Chapman2010}, Kokko \cite{Edwards2012}, UPC++ \cite{Zheng2014}, RAJA \cite{Hornung2014}, ACPdl \cite{Ajima2015}, HPX \cite{Kaiser2014,Kaiser2015}
Runtime     | Dynamic Distribution               | 2           | 4             | 2            | 4               | 4       | 4           | 0         | 1        | 0        | Leda \cite{Salmito2013,Salmito2014}
Proposition | Fluxional Compiler                 | 2           | 5             | 2            | 5               | 3       | 3           | 3         | 3        | 3        | Fluxional Compiler
Proposition | Fluxional Runtime                  | 5           | 5             | 5            | 5               | 5       | 5           | 3         | 3        | 3        | Fluxional Runtime