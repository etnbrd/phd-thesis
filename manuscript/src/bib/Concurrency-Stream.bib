Automatically generated by Mendeley Desktop 1.14.1-dev7
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Mark2003,
author = {Mark, WR and Glanville, RS},
file = {:home/etn/Documents/PhD/Biblio/Mark, Glanville - 2003 - Cg A system for programming graphics hardware in a C-like language.pdf:pdf},
journal = {\ldots  Transactions on Graphics ( \ldots},
title = {{Cg: A system for programming graphics hardware in a C-like language}},
url = {http://dl.acm.org/citation.cfm?id=882362},
year = {2003}
}
@article{Abadi2003a,
author = {Abadi, DJ and Carney, D},
journal = {The VLDB Journal— \ldots},
title = {{Aurora: a new model and architecture for data stream management}},
url = {http://dl.acm.org/citation.cfm?id=950485},
year = {2003}
}
@article{Golab2003,
author = {Golab, L and \"{O}zsu, MT},
file = {:home/etn/Documents/PhD/Biblio/Golab, \"{O}zsu - 2003 - Issues in data stream management.pdf:pdf},
journal = {ACM Sigmod Record},
title = {{Issues in data stream management}},
url = {http://dl.acm.org/citation.cfm?id=776986},
year = {2003}
}
@article{Fernandez2013,
author = {Fernandez, R Castro},
file = {:home/etn/Documents/PhD/Biblio/Fernandez - 2013 - Integrating scale out and fault tolerance in stream processing using operator state management.pdf:pdf},
journal = {Proceedings of the  \ldots},
title = {{Integrating scale out and fault tolerance in stream processing using operator state management}},
url = {http://dl.acm.org/citation.cfm?id=2465282},
year = {2013}
}
@article{Bhatotia2011,
abstract = {Many online data sets evolve over time as new entries are slowly added and existing entries are deleted or modified. Taking advantage of this, systems for incremental bulk data processing, such as Google's Percolator, can achieve efficient updates. To achieve this efficiency, however, these systems lose compatibility with the simple programming models offered by non-incremental systems, e.g., MapReduce, and more importantly, requires the programmer to implement application-specific dynamic algorithms, ultimately increasing algorithm and code complexity. In this paper, we describe the architecture, implementation, and evaluation of Incoop, a generic MapReduce framework for incremental computations. Incoop detects changes to the input and automatically updates the output by employing an efficient, fine-grained result reuse mechanism. To achieve efficiency without sacrificing transparency, we adopt recent advances in the area of programming languages to identify the shortcomings of task-level memoization approaches, and to address these shortcomings by using several novel techniques: a storage system, a contraction phase for Reduce tasks, and an affinity-based scheduling algorithm. We have implemented Incoop by extending the Hadoop framework, and evaluated it by considering several applications and case studies. Our results show significant performance improvements without changing a single line of application code.},
author = {Bhatotia, Pramod and Wieder, Alexander and Rodrigues, Rodrigo and Acar, Umut a and Pasquin, Rafael},
doi = {10.1145/2038916.2038923},
file = {:home/etn/Documents/PhD/Biblio/Bhatotia et al. - 2011 - Incoop MapReduce for incremental computations(2).pdf:pdf},
isbn = {9781450309769},
issn = {1450309763},
journal = {Proceedings of the 2nd ACM Symposium on Cloud Computing - SOCC '11},
keywords = {memoization,self-adjusting computation,stability},
pages = {1--14},
pmid = {11412367},
title = {{Incoop: MapReduce for incremental computations}},
url = {http://dl.acm.org/citation.cfm?id=2038923 http://dl.acm.org/citation.cfm?doid=2038916.2038923},
year = {2011}
}
@article{Qian2013,
author = {Qian, Z and He, Y and Su, C and Wu, Z and Zhu, H},
journal = {Proceedings of the 8th ACM European Conference on Computer Systems (EuroSys '13)},
title = {{Timestream: Reliable stream computation in the cloud}},
url = {http://dl.acm.org/citation.cfm?id=2465353},
year = {2013}
}
@article{Aref2004,
author = {Aref, WG and Elmagarmid, AK},
journal = {\ldots  on Data  \ldots},
title = {{Nile: a query processing engine for data streams}},
url = {http://www-users.cs.umn.edu/$\sim$mokbel/papers/NileDemo.pdf},
year = {2004}
}
@article{Arasu2005,
author = {Arasu, Arvind and Babu, Shivnath and Widom, Jennifer},
doi = {10.1007/s00778-004-0147-z},
file = {:home/etn/Documents/PhD/Biblio/Arasu, Babu, Widom - 2005 - The CQL continuous query language semantic foundations and query execution.pdf:pdf},
issn = {1066-8888},
journal = {The VLDB Journal},
keywords = {Continuous queries,Data streams,Query language,Query processing},
month = {jul},
number = {2},
pages = {121--142},
publisher = {Springer-Verlag New York, Inc.},
title = {{The CQL continuous query language: semantic foundations and query execution}},
url = {http://dl.acm.org/citation.cfm?id=1146461.1146463},
volume = {15},
year = {2005}
}
@article{Abadi2003,
author = {Abadi, D and Carney, D and Cetintemel, U},
journal = {Proceedings of the \ldots},
title = {{Aurora: a data stream management system}},
url = {http://dl.acm.org/citation.cfm?id=872855},
year = {2003}
}
@inproceedings{Xin2013,
address = {New York, New York, USA},
author = {Xin, Reynold S. and Rosen, Josh and Zaharia, Matei and Franklin, Michael J. and Shenker, Scott and Stoica, Ion},
booktitle = {Proceedings of the 2013 international conference on Management of data - SIGMOD '13},
doi = {10.1145/2463676.2465288},
file = {:home/etn/Documents/PhD/Biblio/Xin et al. - 2013 - Shark.pdf:pdf},
isbn = {9781450320375},
keywords = {data warehouse,databases,hadoop,machine learning,shark,spark},
month = {jun},
pages = {13},
publisher = {ACM Press},
title = {{Shark}},
url = {http://dl.acm.org/citation.cfm?id=2463676.2465288},
year = {2013}
}
@article{Krishnamurthy2003,
author = {Krishnamurthy, S and Chandrasekaran, S},
file = {:home/etn/Documents/PhD/Biblio/Krishnamurthy, Chandrasekaran - 2003 - TelegraphCQ An architectural status report.pdf:pdf},
journal = {IEEE Data Eng. \ldots},
title = {{TelegraphCQ: An architectural status report}},
url = {http://db.lcs.mit.edu/madden/html/deissue-b.pdf#page=13},
year = {2003}
}
@article{Buck2004,
author = {Buck, I and Foley, T and Horn, D},
file = {:home/etn/Documents/PhD/Biblio/Buck, Foley, Horn - 2004 - Brook for GPUs stream computing on graphics hardware.pdf:pdf},
journal = {\ldots  on Graphics (TOG)},
title = {{Brook for GPUs: stream computing on graphics hardware}},
url = {http://dl.acm.org/citation.cfm?id=1015800},
year = {2004}
}
@article{Fernandez2014a,
author = {Fernandez, Raul Castro and Migliavacca, Matteo and Kalyvianaki, Evangelia and Pietzuch, Peter},
file = {:home/etn/Documents/PhD/Biblio/Fernandez et al. - 2014 - Making state explicit for imperative big data processing.pdf:pdf},
journal = {USENIX ATC},
title = {{Making state explicit for imperative big data processing}},
url = {https://www.usenix.org/system/files/conference/atc14/atc14-paper-castro_fernandez.pdf},
year = {2014}
}
@article{Migliavacca2010,
author = {Migliavacca, M and Eyers, D},
journal = {Middleware'10 Posters  \ldots},
title = {{SEEP: scalable and elastic event processing}},
url = {http://dl.acm.org/citation.cfm?id=1930032},
year = {2010}
}
@article{Isard2007,
author = {Isard, M and Budiu, M and Yu, Y and Birrell, A and Fetterly, D},
journal = {ACM SIGOPS Operating  \ldots},
title = {{Dryad: distributed data-parallel programs from sequential building blocks}},
url = {http://dl.acm.org/citation.cfm?id=1273005},
year = {2007}
}
@article{Condie2010,
author = {Condie, T and Conway, N and Alvaro, P},
journal = {NSDI},
title = {{MapReduce Online.}},
url = {http://static.usenix.org/events/nsdi10/tech/full_papers/condie.pdf},
year = {2010}
}
@article{Logothetis2010,
abstract = {This work addresses the need for stateful dataflow programs that can rapidly sift through huge, evolving data sets. These data-intensive applications perform complex multi-step computations over successive generations of data inflows, such as weekly web crawls, daily image/video uploads, log files, and growing social networks. While programmers may simply re-run the entire dataflow when new data arrives, this is grossly inefficient, increasing result latency and squandering hardware resources and energy. Alternatively, programmers may use prior results to incrementally incorporate the changes. However, current large-scale data processing tools, such as Map-Reduce or Dryad, limit how programmers incorporate and use state in data-parallel programs. Straightforward approaches to incorporating state can result in custom, fragile code and disappointing performance. This work presents a generalized architecture for continuous bulk processing (CBP) that raises the level of abstraction for building incremental applications. At its core is a flexible, groupwise processing operator that takes state as an explicit input. Unifying stateful programming with a data-parallel operator affords several fundamental opportunities for minimizing the movement of data in the underlying processing system. As case studies, we show how one can use a small set of flexible dataflow primitives to perform web analytics and mine large-scale, evolving graphs in an incremental fashion. Experiments with our prototype using real-world data indicate significant data movement and running time reductions relative to current practice. For example, incrementally computing PageRank using CBP can reduce data movement by 46% and cut running time in half.},
author = {Logothetis, Dionysios and Olston, Christopher and Reed, Benjamin and Webb, Kevin C. and Yocum, Ken},
doi = {10.1145/1807128.1807138},
file = {:home/etn/Documents/PhD/Biblio/Logothetis et al. - 2010 - Stateful bulk processing for incremental analytics.pdf:pdf},
isbn = {9781450300360},
journal = {International Conference on Management of Data},
keywords = {cloud computing,incremental,mapreduce,parallel data processing},
pages = {51--62},
title = {{Stateful bulk processing for incremental analytics}},
url = {http://dl.acm.org/citation.cfm?id=1807138 http://portal.acm.org/citation.cfm?id=1807128.1807138},
year = {2010}
}
@article{Krawutschke2011,
author = {Krawutschke, D},
title = {{StreamIt: A Language for Streaming Applications}},
url = {http://rtsys.informatik.uni-kiel.de/svn/teaching/sem/11ss-conc/dkr/11ss-conc-dkr-talk.pdf},
year = {2011}
}
@article{Han2012,
author = {Han, S and Marshall, S},
journal = {Proceedings of the 10th  \ldots},
title = {{Megapipe: a new programming interface for scalable network i/o}},
url = {https://www.usenix.org/system/files/conference/osdi12/osdi12-final-40.pdf},
year = {2012}
}
@article{Gunda2010,
abstract = {Managing data and computation is at the heart of datacenter computing. Manual management of data can lead to data loss, wasteful consumption of storage, and laborious bookkeeping. Lack of proper management of computation can result in lost opportunities to share common computations across multiple jobs or to compute results incrementally. Nectar is a system designed to address the aforementioned problems. It automates and unifies the management of data and computation within a datacenter. In Nectar, data and computation are treated interchangeably by associating data with its computation. Derived datasets, which are the results of computations, are uniquely identified by the programs that produce them, and together with their programs, are automatically managed by a datacenter wide caching service. Any derived dataset can be transparently regenerated by re-executing its program, and any computation can be transparently avoided by using previously cached results. This enables us to greatly improve datacenter management and resource utilization: obsolete or infrequently used derived datasets are automatically garbage collected, and shared common computations are computed only once and reused by others. This paper describes the design and implementation of Nectar, and reports on our evaluation of the system using analytic studies of logs from several production clusters and an actual deployment on a 240-node cluster.},
author = {Gunda, Pradeep Kumar and Ravindranath, Lenin and Thekkath, Chandramohan a and Yu, Yuan and Zhuang, Li},
file = {:home/etn/Documents/PhD/Biblio/Gunda et al. - 2010 - Nectar Automatic Management of Data and Computation in Datacenters.pdf:pdf},
isbn = {978-1-931971-79-9},
journal = {Technology},
pages = {1--8},
title = {{Nectar : Automatic Management of Data and Computation in Datacenters}},
url = {https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Gunda.pdf http://www.usenix.org/event/osdi10/tech/full_papers/Gunda.pdf},
year = {2010}
}
@article{McSherry,
author = {McSherry, F and Isaacs, R and Isard, M and Murray, DG},
file = {:home/etn/Documents/PhD/Biblio/McSherry et al. - 2012 - Composable Incremental and Iterative Data-Parallel Computation with Naiad.pdf:pdf},
journal = {Microsoft Research},
title = {{Composable Incremental and Iterative Data-Parallel Computation with Naiad}},
url = {http://202.114.89.42/resource/pdf/6992.pdf},
year = {2012}
}
@article{Power2010,
author = {Power, R and Li, J},
file = {:home/etn/Documents/PhD/Biblio/Power, Li - 2010 - Piccolo Building Fast, Distributed Programs with Partitioned Tables.pdf:pdf},
journal = {OSDI},
title = {{Piccolo: Building Fast, Distributed Programs with Partitioned Tables.}},
url = {http://static.usenix.org/event/osdi10/tech/full_papers/Power.pdf},
year = {2010}
}
@article{Arvind2003,
author = {Arvind, DP and Arasu, A and Babcock, B},
journal = {IEEE Data Engineering \ldots},
title = {{Stream: The stanford stream data manager}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.8.6180},
year = {2003}
}
@article{Wu2007,
author = {Wu, KL and Hildrum, KW and Fan, W},
file = {:home/etn/Documents/PhD/Biblio/Wu, Hildrum, Fan - 2007 - Challenges and experience in prototyping a multi-modal stream analytic and monitoring application on System S.pdf:pdf},
journal = {Proceedings of the 33rd \ldots},
title = {{Challenges and experience in prototyping a multi-modal stream analytic and monitoring application on System S}},
url = {http://dl.acm.org/citation.cfm?id=1325986},
year = {2007}
}
@article{Arasu2003,
abstract = {The STREAM project at Stanford is developing a general-purpose system for processing continuous queries over multiple continuous data streams and stored relations. It is designed to handle high-volume and bursty data streams with large numbers of complex continuous queries. We describe the status of the system as of early 2003 and outline our ongoing research directions.},
author = {Arasu, Arvind and Babcock, Brian and Babu, Shivnath and Datar, Mayur and Ito, Keith and Motwani, Rajeev and Nishizawa, Itaru and Srivastava, Utkarsh and Thomas, Dilys and Varma, Rohit and Widom, Jennifer},
doi = {10.1145/872757.872854},
file = {:home/etn/Documents/PhD/Biblio/Arasu et al. - 2003 - STREAM The Stanford Stream Data Manager.pdf:pdf},
isbn = {158113634X},
issn = {07308078},
journal = {IEEE Data Engineering Bulletin},
number = {March 2003},
pages = {19--26},
pmid = {622423},
title = {{STREAM: The Stanford Stream Data Manager}},
url = {http://ilpubs.stanford.edu:8090/583/1/2003-21.pdf},
volume = {26},
year = {2003}
}
@inproceedings{Neumeyer2010,
abstract = {S4 is a general-purpose, distributed, scalable, partially fault-tolerant, pluggable platform that allows programmers to easily develop applications for processing continuous unbounded streams of data. Keyed data events are routed with affinity to Processing Elements (PEs), which consume the events and do one or both of the following: (1) emit one or more events which may be consumed by other PEs, (2) publish results. The architecture resembles the Actors model, providing semantics of encapsulation and location transparency, thus allowing applications to be massively concurrent while exposing a simple programming interface to application developers. In this paper, we outline the S4 architecture in detail, describe various applications, including real-life deployments. Our design is primarily driven by large scale applications for data mining and machine learning in a production environment. We show that the S4 design is surprisingly flexible and lends itself to run in large clusters built with commodity hardware.},
author = {Neumeyer, Leonardo and Robbins, Bruce and Nair, Anish and Kesari, Anand},
booktitle = {Proceedings - IEEE International Conference on Data Mining, ICDM},
doi = {10.1109/ICDMW.2010.172},
file = {:home/etn/Documents/PhD/Biblio/Neumeyer et al. - 2010 - S4 Distributed stream computing platform.pdf:pdf},
isbn = {9780769542577},
issn = {15504786},
keywords = {Actors programming model,Complex event processing,Concurrent programming,Data processing,Distributed programming,Map-reduce,Middleware,Parallel programming,Real-time search,Software design,Stream computing},
pages = {170--177},
title = {{S4: Distributed stream computing platform}},
url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5693297},
year = {2010}
}
@article{Murray2011,
author = {Murray, DG and Schwarzkopf, M},
file = {:home/etn/Documents/PhD/Biblio/Murray, Schwarzkopf - 2011 - CIEL a universal execution engine for distributed data-flow computing.pdf:pdf},
journal = {Proceedings of the \ldots},
title = {{CIEL: a universal execution engine for distributed data-flow computing}},
url = {http://static.usenix.org/event/nsdi11/tech/full_papers/Murray.pdf},
year = {2011}
}
@article{Gordon2006,
author = {Gordon, MI and Thies, W and Amarasinghe, S},
file = {:home/etn/Documents/PhD/Biblio/Gordon, Thies, Amarasinghe - 2006 - Exploiting coarse-grained task, data, and pipeline parallelism in stream programs.pdf:pdf},
journal = {ACM SIGOPS Operating Systems  \ldots},
title = {{Exploiting coarse-grained task, data, and pipeline parallelism in stream programs}},
url = {http://dl.acm.org/citation.cfm?id=1168877},
year = {2006}
}
@article{Balakrishnan2004,
author = {Balakrishnan, H and Balazinska, M},
journal = {The VLDB Journal},
title = {{Retrospective on aurora}},
url = {http://link.springer.com/article/10.1007/s00778-004-0133-5},
year = {2004}
}
@article{Fernandez2014,
author = {Fernandez, RC and Weidlich, M},
file = {:home/etn/Documents/PhD/Biblio/Fernandez, Weidlich - 2014 - Scalable stateful stream processing for smart grids.pdf:pdf},
journal = {Proceedings of the 8th \ldots},
title = {{Scalable stateful stream processing for smart grids}},
url = {http://dl.acm.org/citation.cfm?id=2611326},
year = {2014}
}
@article{Chandrasekaran2003,
author = {Chandrasekaran, S and Cooper, O},
journal = {Proceedings of the \ldots},
title = {{TelegraphCQ: continuous dataflow processing}},
url = {http://dl.acm.org/citation.cfm?id=872857},
year = {2003}
}
@article{Thies2002,
author = {Thies, W and Karczmarek, M and Amarasinghe, S},
file = {:home/etn/Documents/PhD/Biblio/Thies, Karczmarek, Amarasinghe - 2002 - StreamIt A language for streaming applications.ps:ps},
journal = {Compiler Construction},
title = {{StreamIt: A language for streaming applications}},
url = {http://link.springer.com/chapter/10.1007/3-540-45937-5_14},
year = {2002}
}
@article{Lee1987,
annote = {Ptolemy},
author = {Lee, Edward A and Messerschmitt, David G},
journal = {Proceedings of the IEEE},
keywords = {alire,dataflow},
number = {9},
pages = {1235--1245},
publisher = {IEEE},
title = {{Synchronous data flow}},
url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1458143},
volume = {75},
year = {1987}
}
@article{Consel2003,
author = {Consel, C and Hamdi, H and R\'{e}veill\`{e}re, L},
file = {:home/etn/Documents/PhD/Biblio/Consel, Hamdi, R\'{e}veill\`{e}re - 2003 - Spidle a DSL approach to specifying streaming applications.pdf:pdf},
journal = {Generative  \ldots},
title = {{Spidle: a DSL approach to specifying streaming applications}},
url = {http://link.springer.com/chapter/10.1007/978-3-540-39815-8_1},
year = {2003}
}
@article{Yang,
author = {Yang, F and Qian, Z and Chen, X and Beschastnikh, I},
journal = {research.microsoft.com},
title = {{Sonora: A Platform for Continuous Mobile-Cloud Computing}},
url = {http://research.microsoft.com/pubs/161446/paper.pdf},
year = {2012}
}
@inproceedings{Meijer2006,
address = {New York, New York, USA},
author = {Meijer, Erik and Beckman, Brian and Bierman, Gavin},
booktitle = {Proceedings of the 2006 ACM SIGMOD international conference on Management of data - SIGMOD '06},
doi = {10.1145/1142473.1142552},
isbn = {1595934340},
month = {jun},
pages = {706},
publisher = {ACM Press},
title = {{LINQ}},
url = {http://dl.acm.org/citation.cfm?id=1142473.1142552},
year = {2006}
}
@inproceedings{Caspi1987,
address = {New York, New York, USA},
author = {Caspi, P. and Pilaud, D. and Halbwachs, N. and Plaice, J. A.},
booktitle = {Proceedings of the 14th ACM SIGACT-SIGPLAN symposium on Principles of programming languages - POPL '87},
doi = {10.1145/41625.41641},
isbn = {0897912152},
month = {oct},
pages = {178--188},
publisher = {ACM Press},
title = {{LUSTRE: a declarative language for real-time programming}},
url = {http://dl.acm.org/citation.cfm?id=41625.41641},
year = {1987}
}
@article{Kahn1974,
abstract = {In this paper, we describe a simple language for parallel programming. Its semantics is studied thoroughly. The desirable properties of this language and its deficiencies are exhibited by this theoretical study. Basic results on parallel program schemata are given. We hope in this way to make a case for a more formal (i.e. mathematical) approach to the design of languages for systems programming and the design of operating systems.},
author = {Kahn, Gilles},
file = {:home/etn/Documents/PhD/Biblio/Kahn - 1974 - The semantics of a simple language for parallel programming.pdf:pdf},
journal = {In Information Processing’74: Proceedings of the IFIP Congress},
keywords = {dataflow,important,lu},
pages = {471--475},
publisher = {North-Holland},
title = {{The semantics of a simple language for parallel programming}},
url = {http://www.tik.ee.ethz.ch/tik/education/lectures/hswcd/papers/2_KahnProcessNetworks.pdf http://www.citeulike.org/group/872/article/349829},
volume = {74},
year = {1974}
}
@article{Chen2000,
author = {Chen, J and DeWitt, DJ and Tian, F and Wang, Y},
journal = {ACM SIGMOD Record},
title = {{NiagaraCQ: A scalable continuous query system for internet databases}},
url = {http://dl.acm.org/citation.cfm?id=335432},
year = {2000}
}
@article{Franklin2005,
author = {Franklin, MJ and Jeffery, SR and Krishnamurthy, S},
journal = {CIDR},
title = {{Design Considerations for High Fan-In Systems: The HiFi Approach.}},
url = {http://sites.google.com/site/sailesh/hifiCIDR05.pdf},
year = {2005}
}
@article{Fernandez2013a,
author = {Fernandez, RC and Migliavacca, M},
file = {:home/etn/Documents/PhD/Biblio/Fernandez, Migliavacca - 2013 - Scalable and Fault-tolerant Stateful Stream Processing.pdf:pdf},
journal = {ICCSW},
title = {{Scalable and Fault-tolerant Stateful Stream Processing.}},
url = {http://drops.dagstuhl.de/opus/volltexte/2013/4266/},
year = {2013}
}
@article{Barga2006,
author = {Barga, RS and Goldstein, J and Ali, M and Hong, M},
journal = {arXiv preprint cs/0612115},
title = {{Consistent streaming through time: A vision for event stream processing}},
url = {http://arxiv.org/abs/cs/0612115},
year = {2006}
}
@article{Toshniwal2014,
author = {Toshniwal, A and Taneja, S},
file = {:home/etn/Documents/PhD/Biblio/Toshniwal, Taneja - 2014 - Storm@ twitter.pdf:pdf},
journal = {Proceedings of the 2014 ACM SIGMOD international conference on Management of data - SIGMOD '14},
title = {{Storm@ twitter}},
url = {http://dl.acm.org/citation.cfm?id=2595641},
year = {2014}
}
@article{Naughton2001,
author = {Naughton, JF and DeWitt, DJ and Maier, D},
journal = {IEEE Data Eng. \ldots},
title = {{The Niagara internet query system}},
url = {http://www.cs.cornell.edu/People/Jai/papers/niagaraoverview.pdf},
year = {2001}
}
@article{Murray2013,
abstract = {Naiad is a distributed system for executing data parallel, cyclic dataflow programs. It offers the high throughput of batch processors, the low latency of stream processors, and the ability to perform iterative and incremental computations. Although existing systems offer some of these features, applications that require all three have relied on multiple platforms, at the expense of efficiency, maintainability, and simplicity. Naiad resolves the complexities of combining these features in one framework. A new computational model, timely dataflow, underlies Naiad and captures opportunities for parallelism across a wide class of algorithms. This model enriches dataflow computation with timestamps that represent logical points in the computation and provide the basis for an efficient, lightweight coordination mechanism. We show that many powerful high-level programming models can be built on Naiad's low-level primitives, enabling such diverse tasks as streaming data analysis, iterative machine learning, and interactive graph mining. Naiad outperforms specialized systems in their target application domains, and its unique features enable the development of new high-performance applications.},
address = {New York, New York, USA},
author = {Murray, Derek G. and McSherry, Frank and Isaacs, Rebecca and Isard, Michael and Barham, Paul and Abadi, Mart\'{\i}n},
doi = {10.1145/2517349.2522738},
file = {:home/etn/Documents/PhD/Biblio/Murray et al. - 2013 - Naiad.pdf:pdf},
isbn = {9781450323888},
journal = {Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles - SOSP '13},
month = {nov},
pages = {439--455},
publisher = {ACM Press},
title = {{Naiad}},
url = {http://dl.acm.org/citation.cfm?id=2517349.2522738 http://dl.acm.org/citation.cfm?id=2522738\nhttp://dl.acm.org/citation.cfm?doid=2517349.2522738},
year = {2013}
}
@article{He2010,
author = {He, B and Yang, M and Guo, Z and Chen, R and Su, B},
file = {:home/etn/Documents/PhD/Biblio/He et al. - 2010 - Comet batched stream processing for data intensive distributed computing.pdf:pdf},
journal = {\ldots on Cloud computing},
title = {{Comet: batched stream processing for data intensive distributed computing}},
url = {http://dl.acm.org/citation.cfm?id=1807139},
year = {2010}
}
@misc{Apache2011,
author = {Apache},
title = {{Apache Flume}},
url = {http://flume.apache.org/},
year = {2011}
}
@article{Balazinska2008,
author = {Balazinska, M and Balakrishnan, H},
journal = {\ldots  on Database Systems ( \ldots},
title = {{Fault-tolerance in the Borealis distributed stream processing system}},
url = {http://dl.acm.org/citation.cfm?id=1331907},
year = {2008}
}
@article{Bartenstein2014,
author = {Bartenstein, TW and Liu, YD},
file = {:home/etn/Documents/PhD/Biblio/Bartenstein, Liu - 2014 - Rate types for stream programs.pdf:pdf},
journal = {Proceedings of the 2014 ACM International  \ldots},
title = {{Rate types for stream programs}},
url = {http://dl.acm.org/citation.cfm?id=2660225},
year = {2014}
}
@article{Peng2010,
author = {Peng, D and Dabek, F},
journal = {OSDI},
title = {{Large-scale Incremental Processing Using Distributed Transactions and Notifications.}},
url = {http://www.usenix.org/event/osdi10/tech/full_papers/Peng.pdf},
year = {2010}
}
@inproceedings{Lerner2003,
abstract = {An order-dependent query is one whose result (interpreted as a multiset) changes if the order of the input records is changed. In a stock-quotes database, for instance, retriev- ing all quotes concerning a given stock for a given day does not depend on order, because the collection of quotes does not depend on order. By contrast, finding a stock’s five- price moving-average in a trades table gives a result that depends on the order of the table. Query languages based on the relational data model can handle order-dependent queries only through add-ons. SQL:1999, for instance, has a new “window” mechanism which can sort data in limited parts of a query. Add-ons make order-dependent queries difficult to write and to optimize. In this paper we show that order can be a natural property of the underlying data model and algebra. We introduce a new query language and algebra, called AQuery, that supports order from-the- ground-up. New order-related query transformations arise in this setting. We show by experiment that this framework – language plus optimization techniques – brings orders-of- magnitude improvement over SQL:1999 systems on many natural order-dependent queries.},
author = {Lerner, Alberto and Shasha, Dennis},
booktitle = {Proceedings of the 29th international conference on Very large data bases-Volume 29},
file = {:home/etn/Documents/PhD/Biblio/Lerner, Shasha - 2003 - Aquery Query language for ordered data, optimization techniques, and experiments.pdf:pdf},
isbn = {0127224424},
month = {sep},
pages = {345--356},
publisher = {VLDB Endowment},
title = {{Aquery: Query language for ordered data, optimization techniques, and experiments}},
url = {http://dl.acm.org/citation.cfm?id=1315451.1315482 http://portal.acm.org/citation.cfm?id=1315482&amp;dl=GUIDE,},
year = {2003}
}
@article{Zaharia,
author = {Zaharia, M and Chowdhury, M and Das, T and Dave, A},
file = {:home/etn/Documents/PhD/Biblio/Zaharia et al. - 2010 - Fast and interactive analytics over Hadoop data with Spark.pdf:pdf},
journal = {usenix.org},
pages = {45--51},
title = {{Fast and interactive analytics over Hadoop data with Spark}},
url = {https://www.usenix.org/system/files/login/articles/zaharia.pdf},
year = {2010}
}
@article{Logothetis2011,
author = {Logothetis, D and Trezzo, C},
journal = {2011 USENIX Annual  \ldots},
title = {{In-situ mapreduce for log processing}},
url = {http://static.usenix.org/event/atc11/tech/final_files/atc11_proceedings.pdf#page=125},
year = {2011}
}
@article{Stonebraker2005,
author = {Stonebraker, M and \c{C}etintemel, U and Zdonik, S},
journal = {ACM SIGMOD Record},
title = {{The 8 requirements of real-time stream processing}},
url = {http://dl.acm.org/citation.cfm?id=1107504},
year = {2005}
}
@article{Amini2006,
author = {Amini, L and Andrade, H and Bhagwan, R},
file = {:home/etn/Documents/PhD/Biblio/Amini, Andrade, Bhagwan - 2006 - SPC A distributed, scalable platform for data mining.pdf:pdf},
journal = {\ldots on Data mining \ldots},
title = {{SPC: A distributed, scalable platform for data mining}},
url = {http://dl.acm.org/citation.cfm?id=1289615},
year = {2006}
}
@article{Yu2009,
author = {Yu, Yuan and Isard, Michael and Fetterly, Dennis and Budiu, Mihai and Erlingsson, Ulfar and Gunda, Pradeep Kumar and Currey, Jon and McSherry, Frank and Achan, Kannan and Poulain, Christophe},
journal = {Microsoft Research},
title = {{Some sample programs written in DryadLINQ}},
url = {http://research.microsoft.com/jump/66811},
year = {2009}
}
@article{Abadi2005,
author = {Abadi, DJ and Ahmad, Y and Balazinska, M},
journal = {CIDR},
title = {{The Design of the Borealis Stream Processing Engine.}},
url = {http://www.cs.harvard.edu/$\sim$mdw/course/cs260r/papers/borealis-cidr05.pdf},
year = {2005}
}
@misc{Marz2011,
abstract = {Storm is a free and open source distributed realtime computation system. Storm makes it easy to reliably process unbounded streams of data, doing for realtime processing what Hadoop did for batch processing. Storm is simple, can be used with any programming language, and is a lot of fun to use!},
author = {Marz, Nathan and Xu, James and Jackson, Jason and Feng, Andy},
title = {{Storm}},
url = {http://storm-project.net/},
year = {2011}
}
@article{Zaharia2012,
abstract = {Many important "big data" applications need to process data arriving in real time. However, current programming models for distributed stream processing are relatively low-level, often leaving the user to worry about consistency of state across the system and fault recovery. Furthermore, the models that provide fault recovery do so in an expensive manner, requiring either hot replication or long recovery times. We propose a new programming model, discretized streams (D-Streams), that offers a high-level functional programming API, strong consistency, and efficient fault recovery. D-Streams support a new recovery mechanism that improves efficiency over the traditional replication and upstream backup solutions in streaming databases: parallel recovery of lost state across the cluster. We have prototyped D-Streams in an extension to the Spark cluster computing framework called Spark Streaming, which lets users seamlessly intermix streaming, batch and interactive queries.},
author = {Zaharia, Matei and Das, Tathagata and Li, Haoyuan and Shenker, Scott and Stoica, Ion},
file = {:home/etn/Documents/PhD/Biblio/Zaharia et al. - 2012 - Discretized streams an efficient and fault-tolerant model for stream processing on large clusters.pdf:pdf},
journal = {Proceedings of the 4th USENIX conference on Hot Topics in Cloud Ccomputing},
pages = {10--10},
title = {{Discretized streams: an efficient and fault-tolerant model for stream processing on large clusters}},
url = {https://www.usenix.org/system/files/conference/hotcloud12/hotcloud12-final28.pdf},
year = {2012}
}
@article{Ashcroft1977a,
author = {Ashcroft, E. A. and Wadge, W. W.},
doi = {10.1145/359636.359715},
issn = {00010782},
journal = {Communications of the ACM},
keywords = {formal systems,iteration,program proving,semantics,structured programming},
month = {jul},
number = {7},
pages = {519--526},
publisher = {ACM},
title = {{Lucid, a nonprocedural language with iteration}},
url = {http://dl.acm.org/citation.cfm?id=359636.359715},
volume = {20},
year = {1977}
}
@article{Jain2006,
author = {Jain, N and Amini, L and Andrade, H and King, R},
file = {:home/etn/Documents/PhD/Biblio/Jain et al. - 2006 - Design, implementation, and evaluation of the linear road benchmark on the stream processing core.pdf:pdf},
journal = {Proceedings of the \ldots},
title = {{Design, implementation, and evaluation of the linear road benchmark on the stream processing core}},
url = {http://dl.acm.org/citation.cfm?id=1142522},
year = {2006}
}
@article{Zaharia2010,
author = {Zaharia, M and Chowdhury, M},
file = {:home/etn/Documents/PhD/Biblio/Zaharia, Chowdhury - 2010 - Spark cluster computing with working sets.pdf:pdf},
journal = {HotCloud'10 Proceedings of the 2nd USENIX conference on Hot topics in cloud computing},
title = {{Spark: cluster computing with working sets}},
url = {http://static.usenix.org/legacy/events/hotcloud10/tech/full_papers/Zaharia.pdf http://www.usenix.org/event/hotcloud10/tech/full_papers/Zaharia.pdf},
year = {2010}
}
@article{Zhang2005,
author = {Zhang, D and Li, ZZ and Song, H and Liu, L},
file = {:home/etn/Documents/PhD/Biblio/Zhang et al. - 2005 - A programming model for an embedded media processing architecture.pdf:pdf},
journal = {\ldots Systems: Architectures, Modeling, and \ldots},
title = {{A programming model for an embedded media processing architecture}},
url = {http://link.springer.com/chapter/10.1007/11512622_27},
year = {2005}
}
@article{Gedik2008,
author = {Gedik, B and Andrade, H and Wu, KL and Yu, PS and Doo, M},
journal = {Proceedings of the 2008  \ldots},
title = {{SPADE: the system s declarative stream processing engine}},
url = {http://dl.acm.org/citation.cfm?id=1376729},
year = {2008}
}
@article{Chen2005,
author = {Chen, MK and Li, XF and Lian, R and Lin, JH and Liu, L},
file = {:home/etn/Documents/PhD/Biblio/Chen et al. - 2005 - Shangri-La achieving high performance from compiled network applications while enabling ease of programming.pdf:pdf},
journal = {ACM SIGPLAN  \ldots},
title = {{Shangri-La: achieving high performance from compiled network applications while enabling ease of programming}},
url = {http://dl.acm.org/citation.cfm?id=1065038},
year = {2005}
}
@book{Luckham2002,
author = {Luckham, DC},
title = {{The power of events}},
url = {https://sisis.rz.htw-berlin.de/inh2010/12375999.pdf},
year = {2002}
}
@article{Hirzel2014,
author = {Hirzel, M and Soul\'{e}, R and Schneider, S},
file = {:home/etn/Documents/PhD/Biblio/Hirzel, Soul\'{e}, Schneider - 2014 - A catalog of stream processing optimizations.pdf:pdf},
journal = {ACM Computing Surveys  \ldots},
title = {{A catalog of stream processing optimizations}},
url = {http://dl.acm.org/citation.cfm?id=2528412},
year = {2014}
}
@article{Akidau2013,
author = {Akidau, T and Balikov, A},
journal = {Proceedings of the VLDB Endowment 6.11},
title = {{MillWheel: Fault-Tolerant Stream Processing at Internet Scale}},
url = {http://research.google.com/pubs/archive/41378.pdf},
year = {2013}
}
@misc{TechnicalComittee2003,
author = {{Technical Comittee}},
booktitle = {Data Engineering},
number = {1},
title = {{Special Issue on Data Stream Processing}},
url = {http://people.cs.aau.dk/$\sim$tbp/BIT/moede10/A03MAR-CD.pdf#page=5},
volume = {26},
year = {2003}
}
