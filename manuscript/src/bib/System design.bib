Automatically generated by Mendeley Desktop 1.16-dev2
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Parnas2002,
author = {Parnas, DL},
journal = {Software pioneers},
title = {{The secret history of information hiding}},
url = {http://link.springer.com/chapter/10.1007/978-3-642-59412-0{\_}26},
year = {2002}
}
@article{Parnas1972,
abstract = {This paper discusses modularization as a mechanism for improving the flexibility and comprehensibility of a system while allowing the shortening of its development time. The effectiveness of a $\backslash${\&}quot;modularization $\backslash${\&}quot; is dependent upon the criteria used in dividing the system into modules. A system design problem is presented and both a conventional and unconventional decomposition are described. It is shown that the unconventional decompositions have distinct advantages for the goals outlined. The criteria used in arriving at the decom-positions are discussed. The unconventional decomposi-tion, if implemented with the conventional assumption that a module consists of one or more subroutines, will be less efficient in most cases. An alternative approach to implementation which does not have this effect is sketched.},
author = {Parnas, D. L.},
doi = {10.1145/361598.361623},
file = {:home/etn/Documents/PhD/Biblio/Parnas - 1972 - On the criteria to be used in decomposing systems into modules.pdf:pdf},
isbn = {0917072146},
issn = {00010782},
journal = {Communications of the ACM},
keywords = {KWIC index,modularity,modules,software,software design,software engineering},
number = {12},
pages = {1053--1058},
pmid = {213},
title = {{On the criteria to be used in decomposing systems into modules}},
url = {http://dl.acm.org/citation.cfm?id=361623 http://portal.acm.org/citation.cfm?doid=361598.361623},
volume = {15},
year = {1972}
}
@inproceedings{Wong2009,
author = {Wong, Sunny and Cai, Yuanfang and Valetto, Giuseppe and Simeonov, Georgi and Sethi, Kanwarpreet},
booktitle = {2009 IEEE/ACM International Conference on Automated Software Engineering},
doi = {10.1109/ASE.2009.53},
file = {:home/etn/Documents/PhD/Biblio/Wong et al. - 2009 - Design Rule Hierarchies and Parallelism in Software Development Tasks.pdf:pdf},
isbn = {978-1-4244-5259-0},
keywords = {collaboration,project management,software architecture},
month = {nov},
pages = {197--208},
publisher = {IEEE},
title = {{Design Rule Hierarchies and Parallelism in Software Development Tasks}},
url = {http://dl.acm.org/citation.cfm?id=1747491.1747520},
year = {2009}
}
@article{Parnas1979,
author = {Parnas, D.L.},
doi = {10.1109/TSE.1979.234169},
file = {:home/etn/Documents/PhD/Biblio/Parnas - 1979 - Designing Software for Ease of Extension and Contraction.pdf:pdf},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Computer industry,Computer science,Contractibility,Data structures,Information systems,Job shop scheduling,Processor scheduling,Programming profession,Software design,Software engineering,Software systems,extensibility,modularity,software engineering,subsets,supersets},
language = {English},
month = {mar},
number = {2},
pages = {128--138},
publisher = {IEEE},
title = {{Designing Software for Ease of Extension and Contraction}},
url = {http://ieeexplore.ieee.org/articleDetails.jsp?arnumber=1702607},
volume = {SE-5},
year = {1979}
}
@article{Stevens1974,
author = {Stevens, W. P. and Myers, G. J. and Constantine, L. L.},
doi = {10.1147/sj.132.0115},
file = {:home/etn/Documents/PhD/Biblio/Stevens, Myers, Constantine - 1974 - Structured design.pdf:pdf},
issn = {0018-8670},
journal = {IBM Systems Journal},
language = {English},
number = {2},
pages = {115--139},
publisher = {IBM},
title = {{Structured design}},
url = {http://ieeexplore.ieee.org/articleDetails.jsp?arnumber=5388187},
volume = {13},
year = {1974}
}
@article{Chen2009,
abstract = {Many problem factors in the software development phase affect the maintainability of the delivered software systems. Therefore, understanding software development problem factors can help in not only reducing the incidence of project failure but can also ensure software maintainability. This study focuses on those software development problem factors which may possibly affect software maintainability. Twenty-five problem factors were classified into five dimensions; a questionnaire was designed and 137 software projects were surveyed. A K-means cluster analysis was performed to classify the projects into three groups of low, medium and high maintainability projects. For projects which had a higher level of severity of problem factors, the influence on software maintainability becomes more obvious. The influence of software process improvement (SPI) on project problems and the associated software maintainability was also examined in this study. Results suggest that SPI can help reduce the level of severity of the documentation quality and process management problems, and is only likely to enhance software maintainability to a medium level. Finally, the top 10 list of higher-severity software development problem factors was identified, and implications were discussed.},
author = {Chen, Jie-Cherng and Huang, Sun-Jen},
doi = {10.1016/j.jss.2008.12.036},
file = {:home/etn/Documents/PhD/Biblio/Chen, Huang - 2009 - An empirical analysis of the impact of software development problem factors on software maintainability.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Software development problem factors,Software maintainability,Software process improvement},
month = {jun},
number = {6},
pages = {981--992},
title = {{An empirical analysis of the impact of software development problem factors on software maintainability}},
url = {http://www.sciencedirect.com/science/article/pii/S0164121208002793},
volume = {82},
year = {2009}
}
@inproceedings{Riaz2009,
author = {Riaz, Mehwish and Mendes, Emilia and Tempero, Ewan},
booktitle = {2009 3rd International Symposium on Empirical Software Engineering and Measurement},
doi = {10.1109/ESEM.2009.5314233},
file = {:home/etn/Documents/PhD/Biblio/Riaz, Mendes, Tempero - 2009 - A systematic review of software maintainability prediction and metrics.pdf:pdf},
isbn = {978-1-4244-4842-5},
month = {oct},
pages = {367--377},
publisher = {IEEE},
title = {{A systematic review of software maintainability prediction and metrics}},
url = {http://dl.acm.org/citation.cfm?id=1671248.1671283},
year = {2009}
}
@article{Welker2001,
author = {Welker, KD},
file = {:home/etn/Documents/PhD/Biblio/Welker - 2001 - The software maintainability index revisited.pdf:pdf},
journal = {CrossTalk},
title = {{The software maintainability index revisited}},
url = {http://staff.unak.is/andy/MScMaintenance0809/Lectures/Add/MIRevisited2001.pdf},
year = {2001}
}
@inproceedings{Stroggylos2007,
author = {Stroggylos, Konstantinos and Spinellis, Diomidis},
booktitle = {Fifth International Workshop on Software Quality (WoSQ'07: ICSE Workshops 2007)},
doi = {10.1109/WOSQ.2007.11},
file = {:home/etn/Documents/PhD/Biblio/Stroggylos, Spinellis - 2007 - Refactoring--Does It Improve Software Quality.pdf:pdf},
isbn = {0-7695-2959-3},
month = {may},
pages = {10--10},
publisher = {IEEE},
title = {{Refactoring--Does It Improve Software Quality?}},
url = {http://dl.acm.org/citation.cfm?id=1270241.1270369},
year = {2007}
}
@article{Dijkstra1968,
author = {Dijkstra, Edsger W.},
doi = {10.1145/363095.363143},
file = {:home/etn/Documents/PhD/Biblio/Dijkstra - 1968 - The structure of the “THE”-multiprogramming system.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
keywords = {cooperating sequential processes,input-output buffering,multiprocessing,multiprogramming,multiprogramming system,operating system,processor sharing,program verification,real-time debugging,synchronizing primitives,system hierarchy,system levels,system structure},
month = {may},
number = {5},
pages = {341--346},
publisher = {ACM},
title = {{The structure of the “THE”-multiprogramming system}},
url = {http://dl.acm.org/citation.cfm?id=363095.363143},
volume = {11},
year = {1968}
}
@article{Dijkstra1968a,
author = {Dijkstra, Edsger W.},
doi = {10.1145/362929.362947},
file = {:home/etn/Documents/PhD/Biblio/Dijkstra - 1968 - Letters to the editor go to statement considered harmful.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
keywords = {alternative clause,branch instruction,conditional clause,go to statement,jump instruction,program intelligibility,program sequencing,repetitive clause},
month = {mar},
number = {3},
pages = {147--148},
publisher = {ACM},
title = {{Letters to the editor: go to statement considered harmful}},
url = {http://dl.acm.org/citation.cfm?id=362929.362947},
volume = {11},
year = {1968}
}
@article{Conway1963,
author = {Conway, Melvin E.},
doi = {10.1145/366663.366704},
file = {:home/etn/Documents/PhD/Biblio/Conway - 1963 - Design of a separable transition-diagram compiler.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
month = {jul},
number = {7},
pages = {396--408},
publisher = {ACM},
title = {{Design of a separable transition-diagram compiler}},
url = {http://dl.acm.org/citation.cfm?id=366663.366704},
volume = {6},
year = {1963}
}
@inproceedings{Adam2008,
abstract = {Business Process Management (BPM) and Service Oriented Architectures (SOA) are considered as a powerful combination for supporting enterprise’s success. While BPM addresses the (goal-driven) design, deployment, and continuous evaluation of business processes, SOA promises a supporting IT paradigm to make process applications and thus enterprises more agile and flexible. Nevertheless, there is still a gap between business and IT, as the services provided by an SOA cannot - until now - support the business processes immediately. In this paper, we focus on the transition between the design and the deployment of business processes and present our ideas on how this transition could be streamlined by a better alignment of BPM and SOA. Based on systems engineering and product line experience, we identify solution principles and discuss related questions.},
author = {Adam, Sebastian and Doerr, Joerg},
booktitle = {CEUR Workshop Proceedings},
file = {:home/etn/Documents/PhD/Biblio/Adam, Doerr - 2008 - How to better align BPM {\&} SOA - Ideas on improving the transition between process design and deployment.pdf:pdf},
issn = {16130073},
keywords = {Business IT alignment,Business Process Management,Product line engineering,Service-oriented architecture},
pages = {49--55},
title = {{How to better align BPM {\&} SOA - Ideas on improving the transition between process design and deployment}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.143.870{\&}rep=rep1{\&}type=pdf},
volume = {335},
year = {2008}
}
@article{Lewis1995,
author = {Lewis, T. and Power, D. and Meyer, B. and Grimes, J. and Potel, M. and Vetter, R. and Laplante, P. and Pree, W. and Pomberger, G. and Hill, M.D. and Larus, J.R. and Wood, D.A. and Weide, B.W.},
doi = {10.1109/2.402054},
file = {:home/etn/Documents/PhD/Biblio/Lewis et al. - 1995 - Where is software headed A virtual roundtable.pdf:pdf},
issn = {00189162},
journal = {Computer},
keywords = {Communication industry,Communication system software,Computer industry,Computer networks,Genetic programming,Parallel programming,Peer to peer computing,Pervasive computing,Software algorithms,Software tools,academia,algorithms,computer software,curriculum,desktop computing,evolutionary changes,future,ideas,incremental changes,industry,installed base,market-leading trends,objects,operating systems,parallel software,programming languages,revolutionary changes,software agents,software community polarization,software engineering,software technology,standards,technological forecasting,tools},
language = {English},
number = {8},
pages = {20--32},
publisher = {IEEE},
title = {{Where is software headed? A virtual roundtable}},
url = {http://ieeexplore.ieee.org/articleDetails.jsp?arnumber=402054},
volume = {28},
year = {1995}
}
@article{Dietrich2012,
author = {Dietrich, Jens and McCartin, Catherine and Tempero, Ewan and Shah, Syed M. Ali},
file = {:home/etn/Documents/PhD/Biblio/Dietrich et al. - 2012 - On the existence of high-impact refactoring opportunities in programs.pdf:pdf},
isbn = {978-1-921770-03-6},
month = {jan},
pages = {37--48},
publisher = {Australian Computer Society, Inc.},
title = {{On the existence of high-impact refactoring opportunities in programs}},
url = {http://dl.acm.org/citation.cfm?id=2483654.2483659},
year = {2012}
}
@article{Sullivan2001,
author = {Sullivan, Kevin J. and Griswold, William G. and Cai, Yuanfang and Hallen, Ben},
doi = {10.1145/503271.503224},
file = {:home/etn/Documents/PhD/Biblio/Sullivan et al. - 2001 - The structure and value of modularity in software design.pdf:pdf},
isbn = {1-58113-390-1},
issn = {01635948},
journal = {ACM SIGSOFT Software Engineering Notes},
keywords = {design structure matrix,modularity,real options,software},
month = {sep},
number = {5},
pages = {99},
publisher = {ACM},
title = {{The structure and value of modularity in software design}},
url = {http://dl.acm.org/citation.cfm?id=503271.503224},
volume = {26},
year = {2001}
}
@article{GEIPEL2012,
abstract = {Technological artifacts such as software often comprise a large number of modules; more than twenty thousand in the case of the Java software Eclipse. While on the micro-level this system is modular, how should the building blocks be arranged on the macro-level? In the literature this question has mainly been addressed with the same arguments already used to advocate modularity on the micro-level: Dependencies should be minimized as they impede optimization and flexibility of the system. In contrast to this I argue that along with a change from the micro view to the macro view also the argumentation has to change. In this paper, I analyze the theoretical ramifications of dependency between modules on the macro-level. In particular, I argue that macro-level dependencies are first weak dependencies, and second, foster flexibility and change efficiency. This argumentation is supported by an empirical analysis of 35 software architectures. Data show that dependency relations seldom cause change propagation. F...},
author = {GEIPEL, MARKUS MICHAEL},
doi = {10.1142/S021952591250083X},
issn = {0219-5259},
journal = {Advances in Complex Systems},
keywords = {Modularity,evolution,networks},
language = {en},
month = {aug},
number = {06},
pages = {1250083},
publisher = {World Scientific Publishing Company},
title = {{MODULARITY, DEPENDENCE AND CHANGE}},
url = {http://www.worldscientific.com/doi/abs/10.1142/S021952591250083X},
volume = {15},
year = {2012}
}
@book{Baldwin2000,
abstract = {We live in a dynamic economic and commerical world, surrounded by objects of remarkable complexity and power. In many industries, changes in products and technologies have brought with them new kinds of firms and forms of organization. We are discovering news ways of structuring work, of bringing buyers and sellers together, and of creating and using market information. Although our fast-moving economy often seems to be outside of our influence or control, human beings create the things that create the market forces. Devices, software programs, production processes, contracts, firms, and markets are all the fruit of purposeful action: they are designed.Using the computer industry as an example, Carliss Y. Baldwin and Kim B. Clark develop a powerful theory of design and industrial evolution. They argue that the industry has experienced previously unimaginable levels of innovation and growth because it embraced the concept of modularity, building complex products from smaller subsystems that can be designed independently yet function together as a whole. Modularity freed designers to experiment with different approaches, as long as they obeyed the established design rules. Drawing upon the literatures of industrial organization, real options, and computer architecture, the authors provide insight into the forces of change that drive today's economy.},
author = {Baldwin, Carliss Young and Clark, Kim B.},
isbn = {0262024667},
pages = {471},
publisher = {MIT Press},
title = {{Design Rules: The power of modularity}},
url = {https://books.google.com/books?hl=en{\&}lr={\&}id=oaBOuo4mId8C{\&}pgis=1},
year = {2000}
}
@article{Baldwin1999,
author = {Baldwin, Carliss Y. and Clark, Kim B.},
isbn = {0262024667},
month = {nov},
publisher = {MIT Press},
title = {{Design Rules: The Power of Modularity Volume 1}},
url = {http://dl.acm.org/citation.cfm?id=555152},
year = {1999}
}
@inproceedings{Cataldo2006,
address = {New York, New York, USA},
author = {Cataldo, Marcelo and Wagstrom, Patrick A. and Herbsleb, James D. and Carley, Kathleen M.},
booktitle = {Proceedings of the 2006 20th anniversary conference on Computer supported cooperative work - CSCW '06},
doi = {10.1145/1180875.1180929},
file = {:home/etn/Documents/PhD/Biblio/Cataldo et al. - 2006 - Identification of coordination requirements.pdf:pdf},
isbn = {1595932496},
keywords = {collaboration tools,coordination,dynamic network analysis,task awareness tools},
month = {nov},
pages = {353},
publisher = {ACM Press},
title = {{Identification of coordination requirements}},
url = {http://dl.acm.org/citation.cfm?id=1180875.1180929},
year = {2006}
}
@article{Dobson,
author = {Dobson, By Jamie},
file = {:home/etn/Documents/PhD/Biblio/Dobson - Unknown - The Software Principle of Locality.pdf:pdf},
journal = {Glass},
title = {{The Software Principle of Locality}},
url = {http://www.leanagilepartners.com/library/The{\_}Software{\_}Principle{\_}of{\_}Locality.pdf}
}
@incollection{Dijkstra1982,
abstract = {Since the summer of 1973, when I became a Burroughs Research Fellow, my life has been very different from what it had been before. The daily routine changed: instead of going to the University each day, where I used to spend most of my time in the company of others, I now went there only one day a week and was most of the time that is, when not travelling!-- alone in my study. In my solitude, mail and the written word in general became more and more important. The circumstance that my employer and I had the Atlantic Ocean between us was a further incentive to keep a fairly complete record of what I was doing. The public part of that output found its place in what became known as "the EWD series", which can be viewed as a form of scientific correspondence, possible since the advent of the copier. (That same copier makes it hard to estimate its actual distribution: I myself made about two dozen copies of my texts, but their recipients were welcome to act as further nodes of the distribution tree.) The decision to publish a selection from the EWD series in book form was at first highly embarrassing, but as the months went by I got used to the idea. As soon as some guiding principles had been adopted -- preferably not published elsewhere, as varied and as representative as possible, etc.-- the actual selection process was much easier than I had feared. Harder to decide was the question to how much editing the selected texts should be subjected. When the texts are viewed as historical documents, their editing should be minimal. When David Gries went through the texts with his fine-toothed comb he revealed so many opportunities for improvement that, eventually, the editing became quite extensive. As a result, the texts as published are not representative of my mastery of the English language. A major obstacle to publication was my insistence that selected trip reports be included. Having decided that the selection should be representative, I had no choice, since the period in question covers years during which I was on the road a third of the time. Furthermore, few of my texts reflect my feelings and attitudes more clearly than the trip reports. (It has been remarked that my trip reports are more revealing about their author than about the people and places visited.) There was only one snag: there is no tradition of publishing such comments. While performing artists are quite used to being judged publicly by their peers, performing scientists are not. (Reviews of published books and articles are the closest approximation.)},
author = {Dijkstra, Edsger W},
booktitle = {Selected Writings on Computing: A personal Perspective},
doi = {10.1007/978-1-4612-5695-3},
file = {:home/etn/Documents/PhD/Biblio/Dijkstra - 1982 - On the Role of Scientific Thought.PDF:PDF},
isbn = {0–387–90652–5},
issn = {09694765},
pages = {60--66},
title = {{On the Role of Scientific Thought}},
url = {http://link.springer.com/chapter/10.1007/978-1-4612-5695-3{\_}12 http://www.cs.utexas.edu/users/EWD/ewd04xx/EWD447.PDF$\backslash$nhttp://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD447.html},
year = {1982}
}
@article{Tarr1999,
abstract = {Done well, separation of concerns can provide many software engineering benefits, including reduced complexity, improved reusability, and simpler evolution. The choice of boundaries for separate concerns depends on both requirements on the system and on the kind(s) of decomposition and composition a given formalism supports. The predominant methodologies and formalisms available, however, support only orthogonal separations of concerns, along single dimensions of composition and decomposition. These characteristics lead to a number of well-known and difficult problems. The paper describes a new paradigm for modeling and implementing software artifacts, one that permits separation of overlapping concerns along multiple dimensions of composition and decomposition. This approach addresses numerous problems throughout the software lifecycle in achieving well-engineered, evolvable, flexible software artifacts and traceability across artifacts.},
author = {Tarr, P. and Ossher, H. and Harrison, W. and {Sutton, S.M.}, Jr.},
doi = {10.1145/302405.302457},
file = {:home/etn/Documents/PhD/Biblio/Tarr et al. - 1999 - N degrees of separation multi-dimensional separation of concerns.pdf:pdf},
isbn = {1-58113-074-0},
issn = {0270-5257},
journal = {Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002)},
pages = {107--119},
pmid = {18223559},
title = {{N degrees of separation: multi-dimensional separation of concerns}},
url = {http://www.cs.bilkent.edu.tr/{~}bedir/CS586-AOSD/Syllabus/NDegreesOfSeparation.pdf},
year = {1999}
}
@techreport{Hursch1995,
abstract = {This paper identifies and analyzes the emergence of a new paradigm$\backslash$nin software engineering, called 'separation of concerns, which tries$\backslash$nto formally separate the basic algorithm from special purpose concerns$\backslash$nsuch as synchronization, real-time constraints, and location control.$\backslash$nThis separation allows for the locality of different kinds of information$\backslash$nin the programs, making them easier to write, understand, and modify.$\backslash$nWe identify the major concerns existing in today's software applications,$\backslash$nand analyze recent proposals in the literature that address single$\backslash$nconcerns. Furthermore, we study the commonalities of these proposals$\backslash$nand discuss how they can be used to achieve separation of concerns$\backslash$nin general. Finally, we address the problem of composition of several$\backslash$nseparated concerns.},
author = {H{\"{u}}rsch, Walter and Lopes, Cristina Videira},
file = {:home/etn/Documents/PhD/Biblio/H{\"{u}}rsch, Lopes - 1995 - Separation of Concerns.pdf:pdf},
number = {NU-CCS-95-03},
title = {{Separation of Concerns}},
url = {http://218.15.41.101:8081/BOOKS{\%}5C026{\%}5C21{\%}5CHXYWPJH227696.pdf},
year = {1995}
}
@book{Bay2008,
abstract = {ThoughtWorks is a well-known global consulting firm; ThoughtWorkers are leaders in areas of design, architecture, SOA, testing, and agile methodologies. This collection of essays brings together contributions from well-known ThoughtWorkers such as Martin Fowler, along with other authors you may not know yet. While ThoughtWorks is perhaps best known for their work in the Agile community, this anthology confronts issues throughout the software development life cycle. From technology issues that transcend methodology, to issues of realizing business value from applications, you'll find it here.},
author = {Tilkov, Stefan},
isbn = {9781934356142},
pages = {226},
title = {{The Thoughtworks Anthology: Essays on Software Technology and Innovation}},
url = {https://scholar.google.com/scholar?hl=en{\&}as{\_}sdt=0,39{\&}q=the+thoughtworks+anthology{\#}1},
year = {2008}
}
@book{Goldberg1984,
abstract = {The book is divided into five parts. Part One introduces the usr interface to the Smalltalk-80 syste, Part Two is an explanation of the support provided for finding information about objects that exist in the Smalltalk-80 sytem. Part Three provides an illustrated descrption of how to explore the class descriptions available in the system, and of how to use the editors for implementing new class descriptions. Part Four presents the support available for finding and correcting errors, while Part Five introduces acess to external files and such system housekeeping support as crash recovery and change management. The book is written to encourage specific practice and exploration. A brief introduction to the Smalltalk-80 language is also provided in order to explain the ways in which the user interface components provide access to the language components. For a more in-depth understanding of the language, reader may use this book in conjunction with Smalltalk-80: The Language and Its Implementation, by Adele Goldberg and David Robson (Addison-Wesley, 1983), which includes reference material for the system classes.},
author = {Goldberg, Adele},
booktitle = {Addison-Wesley series in computer science},
isbn = {0201113724},
keywords = {Smalltalk-80 (Computer program language)},
pages = {xi, 516 p.},
pmid = {3295996},
title = {{Smalltalk-80 : the interactive programming environment}},
url = {http://cumincad.scix.net/cgi-bin/works/Show?61be},
year = {1984}
}
@article{Hughes1989,
abstract = {As software becomes more and more complex, it is more and more important to structure it well. Well-structured software is easy to write, easy to debug, and provides a collection of modules that can be re-used to reduce future programming costs. Conventional languages place con- ceptual limits on the way problems can be modularised. Functional lan- guages push those limits back. In this paper we show that two features of functional languages in particular, higher-order functions and lazy eval- uation, can contribute greatly to modularity. As examples, we manipu- late lists and trees, program several numerical algorithms, and implement the alpha-beta heuristic (an algorithm from Artificial Intelligence used in game-playing programs). Since modularity is the key to successful pro- gramming, functional languages are vitally important to the real world.},
author = {Hughes, John},
doi = {10.1093/comjnl/32.2.98},
file = {:home/etn/Documents/PhD/Biblio/Hughes - 1989 - Why functional programming matters.pdf:pdf},
isbn = {0201172364},
issn = {0010-4620},
journal = {The computer journal},
number = {April 1989},
pages = {1--23},
title = {{Why functional programming matters}},
url = {https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf http://comjnl.oxfordjournals.org/content/32/2/98.short},
volume = {32},
year = {1989}
}
@article{Knuth1974,
abstract = {A consideration of several different examples sheds new light on the problem of ereating reliable, well-structured programs that behave efficiently. This study focuses largely on two issues: (a) improved syntax for iterations and error exits, making it possible to write a larger class of programs clearly and efficiently without go to state- ments; (b) a methodology of program design, beginning with readable and correct, but possibly inefficient programs that are systematically transformed if necessary into efficient and correct, but possibly less readable code. The discussion brings out op- posing points of view about whether or not go to statements should be abolished; some merit is found on both sides of this question. Fina!ly, an attempt is made to define the true nature of structured programming, and to recommend fruitful directions for further study},
author = {Knuth, DE},
doi = {10.1145/356635.356640},
file = {:home/etn/Documents/PhD/Biblio/Knuth - 1974 - Structured Programming with go to Statements.pdf:pdf},
isbn = {0-917072-14-6},
issn = {0360-0300},
journal = {ACM Computing Surveys (CSUR)},
keywords = {Boolean variables,Quicksort,efficiency,event indicators,go to statements,iteration,language design,optimization of programs,program manipulation systems searching,program transformations,recursion,structured programming},
month = {dec},
number = {4},
pages = {265--301},
publisher = {ACM},
title = {{Structured Programming with go to Statements}},
url = {http://dl.acm.org/citation.cfm?id=356635.356640 http://dl.acm.org/citation.cfm?id=356640},
volume = {6},
year = {1974}
}
@misc{Dijkstra1970,
abstract = {Manuscript. No abstract.},
author = {Dijkstra, E W},
booktitle = {Structured Programming},
file = {:home/etn/Documents/PhD/Biblio/Dijkstra - 1970 - Notes on structured programming.pdf:pdf},
isbn = {0122005503},
pages = {1--82},
title = {{Notes on structured programming}},
url = {http://www.informatik.uni-bremen.de/agbkb/lehre/programmiersprachen/artikel/EWD-notes-structured.pdf http://www.narcis.nl/publication/RecordID/oai:library.tue.nl:252825},
volume = {70-WSK-03},
year = {1970}
}
@article{Li2015,
author = {Li, Paul Luo and Ko, Andrew J. and Zhu, Jiamin},
file = {:home/etn/Documents/PhD/Biblio/Li, Ko, Zhu - 2015 - What makes a great software engineer.pdf:pdf},
isbn = {978-1-4799-1934-5},
keywords = {expertise,software engineers,teamwork},
month = {may},
pages = {700--710},
publisher = {IEEE Press},
title = {{What makes a great software engineer?}},
url = {http://dl.acm.org/citation.cfm?id=2818754.2818839},
year = {2015}
}
@inproceedings{Wadler1992,
address = {New York, New York, USA},
author = {Wadler, Philip},
booktitle = {Proceedings of the 19th ACM SIGPLAN-SIGACT symposium on Principles of programming languages - POPL '92},
doi = {10.1145/143165.143169},
file = {:home/etn/Documents/PhD/Biblio/Wadler - 1992 - The essence of functional programming.pdf:pdf},
isbn = {0897914538},
month = {feb},
pages = {1--14},
publisher = {ACM Press},
title = {{The essence of functional programming}},
url = {http://dl.acm.org/citation.cfm?id=143165.143169},
year = {1992}
}
@article{Gordon2012,
author = {Gordon, Colin S. and Parkinson, Matthew J. and Parsons, Jared and Bromfield, Aleks and Duffy, Joe},
doi = {10.1145/2398857.2384619},
file = {:home/etn/Documents/PhD/Biblio/Gordon et al. - 2012 - Uniqueness and reference immutability for safe parallelism.pdf:pdf},
isbn = {978-1-4503-1561-6},
issn = {03621340},
journal = {ACM SIGPLAN Notices},
keywords = {concurrency,reference immutability,type systems,views},
month = {nov},
number = {10},
pages = {21},
publisher = {ACM},
title = {{Uniqueness and reference immutability for safe parallelism}},
url = {http://dl.acm.org/citation.cfm?id=2398857.2384619},
volume = {47},
year = {2012}
}
@inproceedings{Sweet1985,
author = {Sweet, Richard E},
booktitle = {ACM SIGPLAN Notices},
doi = {10.1145/17919.806843},
file = {:home/etn/Documents/PhD/Biblio/Sweet - 1985 - The Mesa programming environment.pdf:pdf},
isbn = {0897911652},
issn = {0362-1340},
number = {7},
pages = {216--229},
title = {{The Mesa programming environment}},
url = {http://www.digibarn.com/friends/curbow/star/XDEPaper.pdf},
volume = {20},
year = {1985}
}
@article{Johnson,
abstract = {Object-oriented programming is as much a different way of designing programs as it is a different way of designing programming languages. This paper describes what it is like to design systems in Smalltalk. In particular, since a major motivation for object-oriented programming is software reuse, this paper describes how classes are developed so that they will be reusable.},
author = {Johnson, Ralph E. and Foote, Brian},
isbn = {081868996X},
issn = {0896-8438},
journal = {Journal of Object-Oriented Programming},
keywords = {Brian Foote,C++,Ralph Johnson,black-box,clos,components,computer science,design,designing reusable classes,domain frameworks,domain specific frameworks,dynamic programming,evolution,frameworks,lifecycle,object-oriented,object-oriented design,object-oriented frameworks,object-oriented languages,object-oriented programming,programming languages,realtime,reuse,smalltalk,software architecture,software evolution,software lifecycle,software reuse,white-box},
pages = {22--35},
title = {{Designing Reusable Classes Abstract Designing Reusable Classes}},
url = {http://www.laputan.org/drc.html http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.101.8594},
volume = {1},
year = {1988}
}
@article{VanRoy2003,
abstract = {This innovative text presents computer programming as a unified discipline in a way that is both practical and scientifically sound. The book focuses on techniques of lasting value and explains them precisely in terms of a simple abstract machine. The book presents all major programming paradigms in a uniform framework that shows their deep relationships and how and where to use them together. After an introduction to programming concepts, the book presents both well-known and lesser-known computation models ("programming paradigms"). Each model has its own set of techniques and each is included on the basis of its usefulness in practice. The general models include declarative programming, declarative concurrency, message-passing concurrency, explicit state, object-oriented programming, shared-state concurrency, and relational programming. Specialized models include graphical user interface programming, distributed programming, and constraint programming. Each model is based on its kernel language-a simple core language that consists of a small number of programmer- significant elements. The kernel languages are introduced progressively, adding concepts one by one, thus showing the deep relationships between different models. The kernel languages are defined precisely in terms of a simple abstract machine. Because a wide variety of languages and programming paradigms can be modeled by a small set of closely related kernel languages, this approach allows programmer and student to grasp the underlying unity of programming. The book has many program fragments and exercises, all of which can be run on the Mozart Programming System, an Open Source software package that features an interactive incremental development environment.},
author = {{Van Roy}, Peter and Haridi, Seif},
doi = {10.1017/S1471068405002450},
isbn = {0-262-22069-5},
issn = {1471-0684},
journal = {Theory and Practice of Logic Programming},
pages = {595--600},
pmid = {20035614},
title = {{Concepts, Techniques, and Models of Computer Programming}},
url = {https://mitpress.mit.edu/books/concepts-techniques-and-models-computer-programming},
volume = {5},
year = {2003}
}
@article{Conway1968,
abstract = {Author's note 33 years after publication: Perhaps this paper's most remarkable feature is that it made it to publication with its thesis statement in the third-last paragraph. To save you the trouble of wading through 45 paragraphs to find the thesis, I'll give it to you now: Any organization which designs a system (defined more broadly here than just information systems) will inevitably produce a design whose structure is a copy of the organization's communication structure. This turns out to be a principle with much broader utility than software project management, where references to it usually occur. I invite you to read the paper, then look around to find applications. My current favorite is the complex of social issues encompassing welfare, access to labor markets, housing, education, and drugs. After reading the paper, think about how the structures of our Governments affect their approaches to this system.},
author = {Conway, M E},
file = {:home/etn/Documents/PhD/Biblio/Conway - 1968 - How do committees invent.pdf:pdf},
journal = {Datamation},
keywords = {social-factors software-engineering},
number = {4},
pages = {28--31},
title = {{How do committees invent}},
url = {http://www.melconway.com/Home/pdf/committees.pdf},
volume = {14},
year = {1968}
}
@article{Simon1962,
abstract = {The purpose of this article is to illustrate, through the example of human dynamics, that a thorough understanding of complex systems requires an understanding of network dynamics as well as network topology and architecture. After an overview of the topology of complex networks, such as the Internet and the WWW, data-driven models for human dynamics are given. These models motivate the study of network dynamics and suggest that complexity theory must incorporate the interactions between dynamics and structure. The article also advances the notion that an understanding of network dynamics is facilitated by the availability of large data sets and analysis tools gained from the study of network structure.},
archivePrefix = {arXiv},
arxivId = {cond-mat/0205649},
author = {Simon, Herbert A.},
doi = {10.1109/MCS.2007.384127},
eprint = {0205649},
file = {:home/etn/Documents/PhD/Biblio/Simon - 1962 - The architecture of complexity.pdf:pdf},
isbn = {1066-033X},
issn = {02721708},
journal = {Proceedings of the American Philosophical Societyty},
number = {106},
pages = {467--482},
pmid = {248095600011},
primaryClass = {cond-mat},
title = {{The architecture of complexity}},
url = {http://www.cs.brandeis.edu/{~}cs146a/handouts/papers/simon-complexity.pdf},
volume = {6},
year = {1962}
}
@techreport{ISO25010,
author = {ISO/IEC},
title = {{ISO/IEC 25010:2011 - Systems and software engineering -- Systems and software Quality Requirements and Evaluation (SQuaRE) -- System and software quality models}},
url = {http://www.iso.org/iso/iso{\_}catalogue/catalogue{\_}tc/catalogue{\_}detail.htm?csnumber=35733 http://www.iso.org/iso/catalogue{\_}detail.htm?csnumber=35733},
year = {2010}
}
@misc{Tangen2005,
abstract = {Examines the ways in which the concepts of “productivity” and “performance” are dealt with in the literature, demonstrating that terms used within these fields are often vaguely defined and poorly understood},
author = {Tangen and Stefan},
booktitle = {International Journal of Productivity and Performance Management},
doi = {10.1108/17410400510571437},
isbn = {1741040051},
issn = {1741-0401},
keywords = {Performance appraisal,Performance management,Process efficiency,Productivity rate,Profit,Semantics},
language = {en},
month = {jan},
number = {1},
pages = {34--46},
pmid = {218420762},
publisher = {Emerald Group Publishing Limited},
title = {{Demystifying productivity and performance}},
url = {http://www.emeraldinsight.com/doi/abs/10.1108/17410400510571437},
volume = {54},
year = {2005}
}
