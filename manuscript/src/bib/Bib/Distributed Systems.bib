Automatically generated by Mendeley Desktop 1.12.3-dev1
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Fouquet2012,
author = {Fouquet, F and Morin, B and Fleurey, F},
journal = {\ldots  on Component Based  \ldots},
title = {{A dynamic component model for cyber physical systems}},
url = {http://dl.acm.org/citation.cfm?id=2304759},
year = {2012}
}
@article{Rotem-Gal-Oz2006,
author = {Rotem-Gal-Oz, A},
journal = {\ldots http://www. rgoarchitects. com/Files/fallacies. \ldots},
title = {{Fallacies of distributed computing explained}},
url = {http://www.rgoarchitects.com/Files/fallacies.pdf},
year = {2006}
}
@article{DeCandia2007,
author = {DeCandia, G and Hastorun, D},
file = {:home/etn/Documents/PhD/Biblio/DeCandia, Hastorun - 2007 - Dynamo amazon's highly available key-value store.pdf:pdf},
journal = {ACM SIGOPS  \ldots},
title = {{Dynamo: amazon's highly available key-value store}},
url = {http://dl.acm.org/citation.cfm?id=1294281},
year = {2007}
}
@article{Mullender1990,
author = {Mullender, SJ and Rossum, G Van},
journal = {Computer},
title = {{Amoeba: A distributed operating system for the 1990s}},
url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=53354},
year = {1990}
}
@article{Lakshman2010,
author = {Lakshman, A and Malik, P},
journal = {ACM SIGOPS Operating Systems Review},
title = {{Cassandra: a decentralized structured storage system}},
url = {http://dl.acm.org/citation.cfm?id=1773922},
year = {2010}
}
@inproceedings{Jr1990,
abstract = {We need a programming model that com- bines the advantages of the synchronous and asyn- chronous parallel styles. Synchronous programs are de- terminate (thus easier to reason about) and avoid syn- chronization overheads. Asynchronous programs are more flexible and handle conditionals more efficiently. Here we propose a programming model with the ben- efits of both styles. We allow asynchronous threads of control but restrict shared-memory accesses and other side effects so as to prevent the behavior of the program from depending on any accidents of execution order that can arise from the indeterminacy of the asynchronous process model. These restrictions may be enforced either dynam- ically (at run time) or statically (at compile time). In this paper we concentrate on dynamic enforcement, and exhibit an implementation of a parallel dialect of Scheme based on these ideas. A single successful exe- cution of a parallel program in this model constitutes a proof that the program is free of race conditions (for that particular set of input data). We also speculate on a design for a programming lan- guage using static enforcement. The notion of distinct- ness is important to proofs of noninterference. An ap- propriately designed programming language must sup port such concepts as “all the elements of this array are distinct,” perhaps through its type system. This parallel programming model does not support all styles of parallel programming, but we argue that it can support a large class of interesting algorithms with considerably greater efficiency (in some cases) than a strict SIMD approach and considerably greater safety (in all cases) than a full-blown MIMD approach.},
author = {Guy, L and Steele, Jr},
booktitle = {Proceedings of the 17th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
doi = {10.1145/96709.96731},
isbn = {0-89791-343-4},
issn = {07308566},
pages = {218--231},
title = {{Making asynchronous parallelism safe for the world}},
url = {http://dl.acm.org/citation.cfm?id=96731},
year = {1990}
}
@article{Karger1997,
author = {Karger, D and Lehman, E and Leighton, T},
journal = {Proceedings of the  \ldots},
title = {{Consistent hashing and random trees: Distributed caching protocols for relieving hot spots on the World Wide Web}},
url = {http://dl.acm.org/citation.cfm?id=258660},
year = {1997}
}
@inproceedings{Clements2013a,
address = {New York, New York, USA},
author = {Clements, Austin T. and Kaashoek, M. Frans and Zeldovich, Nickolai and Morris, Robert T. and Kohler, Eddie},
booktitle = {Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles - SOSP '13},
doi = {10.1145/2517349.2522712},
file = {:home/etn/Documents/PhD/Biblio/Clements et al. - 2013 - The scalable commutativity rule.pdf:pdf},
isbn = {9781450323888},
month = nov,
pages = {1--17},
publisher = {ACM Press},
title = {{The scalable commutativity rule}},
url = {http://dl.acm.org/citation.cfm?id=2517349.2522712},
year = {2013}
}
@article{Gribble2001,
author = {Gribble, SD and Welsh, M and Behren, R Von},
file = {:home/etn/Documents/PhD/Biblio/Gribble, Welsh, Behren - 2001 - The Ninja architecture for robust Internet-scale systems and services.pdf:pdf},
journal = {Computer Networks},
title = {{The Ninja architecture for robust Internet-scale systems and services}},
url = {http://www.sciencedirect.com/science/article/pii/S1389128600001791},
year = {2001}
}
@article{Ongaro2014,
author = {Ongaro, D and Ousterhout, J},
file = {:home/etn/Documents/PhD/Biblio/Ongaro, Ousterhout - 2014 - In search of an understandable consensus algorithm.pdf:pdf},
journal = {Proc. USENIX Annual Technical Conference},
keywords = {raft},
mendeley-tags = {raft},
title = {{In search of an understandable consensus algorithm}},
url = {https://www.usenix.org/system/files/conference/atc14/atc14-paper-ongaro.pdf},
year = {2014}
}
@article{Gilbert2002,
author = {Gilbert, S and Lynch, N},
file = {:home/etn/Documents/PhD/Biblio/Gilbert, Lynch - 2002 - Brewer's conjecture and the feasibility of consistent, available, partition-tolerant web services(2).pdf:pdf},
journal = {ACM SIGACT News},
title = {{Brewer's conjecture and the feasibility of consistent, available, partition-tolerant web services}},
url = {http://dl.acm.org/citation.cfm?id=564601},
year = {2002}
}
@article{Cardelli1999,
author = {Cardelli, L and Ghelli, G and Gordon, AD},
journal = {Automata, Languages and Programming},
title = {{Mobility types for mobile ambients}},
url = {http://link.springer.com/chapter/10.1007/3-540-48523-6_20},
year = {1999}
}
@article{Welsh2001,
author = {Welsh, M and Culler, D and Brewer, E},
journal = {ACM SIGOPS Operating Systems Review},
title = {{SEDA: an architecture for well-conditioned, scalable internet services}},
url = {http://dl.acm.org/citation.cfm?id=502057},
year = {2001}
}
@article{Steen2007,
author = {Steen, Marteen Van and Tanenbaum, Andrew S},
journal = {Network},
title = {{Distributed Systems: principles and paradigms}},
url = {http://u.cs.biu.ac.il/$\sim$ariel/download/ds590/pdfs/notes.01.pdf},
year = {2007}
}
@article{Lamport1978,
author = {Lamport, L},
file = {:home/etn/Documents/PhD/Biblio/Lamport - 1978 - Time, clocks, and the ordering of events in a distributed system.pdf:pdf},
journal = {Communications of the ACM},
title = {{Time, clocks, and the ordering of events in a distributed system}},
url = {http://dl.acm.org/citation.cfm?id=359563},
year = {1978}
}
@book{Welsh2000,
author = {Welsh, M and Gribble, SD and Brewer, EA and Culler, D},
file = {:home/etn/Documents/PhD/Biblio/Welsh et al. - 2000 - A design framework for highly concurrent systems.pdf:pdf},
keywords = {Event,SEDA},
mendeley-tags = {Event,SEDA},
title = {{A design framework for highly concurrent systems}},
url = {http://www.cs.berkeley.edu/$\sim$culler/papers/events.pdf},
year = {2000}
}
@article{Gilbert2012,
author = {Gilbert, S and Lynch, NA},
file = {:home/etn/Documents/PhD/Biblio/Gilbert, Lynch - 2012 - Perspectives on the CAP Theorem.pdf:pdf},
title = {{Perspectives on the CAP Theorem}},
url = {http://dspace.mit.edu/handle/1721.1/79112},
year = {2012}
}
@book{Liskov1988,
author = {Liskov, B and Shrira, L},
title = {{Promises: linguistic support for efficient asynchronous procedure calls in distributed systems}},
url = {http://dl.acm.org/citation.cfm?id=54016},
year = {1988}
}
@article{Dean2008,
author = {Dean, J and Ghemawat, S},
journal = {Communications of the ACM},
title = {{MapReduce: simplified data processing on large clusters}},
url = {http://dl.acm.org/citation.cfm?id=1327492},
year = {2008}
}
@inproceedings{Toshniwal2014a,
address = {New York, New York, USA},
author = {Toshniwal, Ankit and Donham, Jake and Bhagat, Nikunj and Mittal, Sailesh and Ryaboy, Dmitriy and Taneja, Siddarth and Shukla, Amit and Ramasamy, Karthik and Patel, Jignesh M. and Kulkarni, Sanjeev and Jackson, Jason and Gade, Krishna and Fu, Maosong},
booktitle = {Proceedings of the 2014 ACM SIGMOD international conference on Management of data - SIGMOD '14},
doi = {10.1145/2588555.2595641},
isbn = {9781450323765},
keywords = {real-time query processing,stream data management},
month = jun,
pages = {147--156},
publisher = {ACM Press},
title = {{Storm@twitter}},
url = {http://dl.acm.org/citation.cfm?id=2588555.2595641},
year = {2014}
}
@book{Fox1997,
author = {Fox, A and Gribble, SD and Chawathe, Y and Brewer, EA and Gauthier, P},
file = {:home/etn/Documents/PhD/Biblio/Fox et al. - 1997 - Cluster-based scalable network services.pdf:pdf},
title = {{Cluster-based scalable network services}},
url = {http://dl.acm.org/citation.cfm?id=266662},
year = {1997}
}
@article{VanCutsem2009,
abstract = {In modern programming languages, concurrency control can be traced back to one of two different schools: actor-based message passing concurrency and thread-based shared-state concurrency. This paper describes a linguistic symbiosis between two programming languages with such different concurrency models. More specifically, we describe a novel symbiosis between actors represented as event loops on the one hand and threads on the other. This symbiosis ensures that the invariants of the actor-based concurrency model are not violated by engaging in symbiosis with multithreaded programs. The proposed mapping is validated by means of a concrete symbiosis between AmbientTalk, a flexible, domain-specific language for writing distributed programs and Java, a conventional object-oriented language. This symbiosis allows the domain-specific language to reuse existing software components written in a multithreaded language without sacrificing the beneficial event-driven properties of the actor concurrency model.},
author = {{Van Cutsem}, Tom and Mostinckx, Stijn and {De Meuter}, Wolfgang},
doi = {10.1016/j.cl.2008.06.005},
file = {:home/etn/Documents/PhD/Biblio/Van Cutsem, Mostinckx, De Meuter - 2009 - Linguistic symbiosis between event loop actors and threads.pdf:pdf},
issn = {14778424},
journal = {Computer Languages, Systems & Structures},
keywords = {Actors,AmbientTalk,Events,Futures,Linguistic symbiosis,Threads},
month = apr,
number = {1},
pages = {80--98},
title = {{Linguistic symbiosis between event loop actors and threads}},
url = {http://www.sciencedirect.com/science/article/pii/S1477842408000249},
volume = {35},
year = {2009}
}
