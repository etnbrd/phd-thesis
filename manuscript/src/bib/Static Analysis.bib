Automatically generated by Mendeley Desktop 1.16-dev4
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@inproceedings{Sridharan2012,
author = {Sridharan, M and Dolby, J and Chandra, S},
booktitle = {ECOOP 2012–Object-Oriented Programming.},
file = {:home/etn/Documents/PhD/Biblio/Sridharan, Dolby, Chandra - 2012 - Correlation tracking for points-to analysis of JavaScript.pdf:pdf},
title = {{Correlation tracking for points-to analysis of JavaScript}},
url = {http://link.springer.com/chapter/10.1007/978-3-642-31057-7{\_}20},
year = {2012}
}
@article{Jones2003,
author = {Jones, J},
journal = {Proceedings of the 10th Conference on Pattern Languages of Programs (PLoP2003)},
title = {{Abstract syntax tree implementation idioms}},
url = {http://scholar.google.com/scholar?hl=en{\&}btnG=Search{\&}q=intitle:Abstract+Syntax+Tree+Implementation+Idioms{\#}1 http://scholar.google.com/scholar?hl=en{\&}btnG=Search{\&}q=intitle:Abstract+syntax+tree+implementation+idioms{\#}1},
year = {2003}
}
@article{Cytron1991,
abstract = {In optimizing compilers, data structure choices directly to the point that advanced optimization influence practical program optimization. A poor choice of data structure can inhibit compilation the power and efficiency optimization features become undesirable. Although of or slow Recently, static single assignment form and the control dependence graph have been proposed to represent data flow and control flow propertiee of programs. Each of these previously lends efficiency and power to a useful class of program optimization. structures are attractive, the difficulty of their discouraged their use. We present new algorithms for arbitrary control flow graphs. The algorithms construction and their may have other applications. We also give analytical and experimental potential unrelated techniques both of these size have that efficiently compute these data structures use dominance frontiers, a new concept that evidence that all of these data structures are usually linear in the size of the original program. This paper thus presents strong evidence that these structures can be of practical use in optimization.},
author = {Cytron, Ron and Ferrante, Jeanne and Rosen, Barry K. and Wegman, Mark N. and Zadeck, F. Kenneth},
doi = {10.1145/115372.115320},
file = {:home/etn/Documents/PhD/Biblio/Cytron et al. - 1991 - Efficiently computing static single assignment form and the control dependence graph.pdf:pdf},
issn = {01640925},
journal = {ACM Transactions on Programming Languages and Systems},
keywords = {and phrases},
number = {4},
pages = {451--490},
title = {{Efficiently computing static single assignment form and the control dependence graph}},
url = {http://dl.acm.org/citation.cfm?id=115320},
volume = {13},
year = {1991}
}
@article{Cytron1989,
author = {Cytron, R and Ferrante, J and Rosen, BK},
file = {:home/etn/Documents/PhD/Biblio/Cytron, Ferrante, Rosen - 1989 - An efficient method of computing static single assignment form.pdf:pdf},
journal = {Proceedings of the 16th {\ldots}},
title = {{An efficient method of computing static single assignment form}},
url = {http://dl.acm.org/citation.cfm?id=75280},
year = {1989}
}
@article{Ferrante1987,
author = {Ferrante, J and Ottenstein, KJ and Warren, JD},
file = {:home/etn/Documents/PhD/Biblio/Ferrante, Ottenstein, Warren - 1987 - The program dependence graph and its use in optimization.pdf:pdf},
journal = {ACM Transactions on {\ldots}},
title = {{The program dependence graph and its use in optimization}},
url = {http://dl.acm.org/citation.cfm?id=24041},
year = {1987}
}
@article{Rosen1988,
author = {Rosen, BK and Wegman, MN and Zadeck, FK},
file = {:home/etn/Documents/PhD/Biblio/Rosen, Wegman, Zadeck - 1988 - Global value numbers and redundant computations.pdf:pdf},
journal = {{\ldots} of the 15th ACM SIGPLAN-SIGACT {\ldots}},
title = {{Global value numbers and redundant computations}},
url = {http://dl.acm.org/citation.cfm?id=73562},
year = {1988}
}
@article{Alpern1988,
author = {Alpern, B and Wegman, MN and Zadeck, FK},
file = {:home/etn/Documents/PhD/Biblio/Alpern, Wegman, Zadeck - 1988 - Detecting equality of variables in programs.pdf:pdf},
journal = {{\ldots}  of the 15th ACM SIGPLAN-SIGACT {\ldots}},
title = {{Detecting equality of variables in programs}},
url = {http://dl.acm.org/citation.cfm?id=73561},
year = {1988}
}
@article{Agrawal1990,
author = {Agrawal, H and Horgan, JR},
file = {:home/etn/Documents/PhD/Biblio/Agrawal, Horgan - 1990 - Dynamic program slicing.pdf:pdf},
journal = {ACM SIGPLAN Notices},
title = {{Dynamic program slicing}},
url = {http://dl.acm.org/citation.cfm?id=93576},
year = {1990}
}
@article{Horwitz1990,
author = {Horwitz, S and Reps, T and Binkley, D},
file = {:home/etn/Documents/PhD/Biblio/Horwitz, Reps, Binkley - 1990 - Interprocedural slicing using dependence graphs.pdf:pdf},
journal = {ACM Transactions on Programming  {\ldots}},
title = {{Interprocedural slicing using dependence graphs}},
url = {http://dl.acm.org/citation.cfm?id=77608},
year = {1990}
}
@article{Tip1995,
author = {Tip, F},
file = {:home/etn/Documents/PhD/Biblio/Tip - 1995 - A survey of program slicing techniques.pdf:pdf},
journal = {Journal of programming languages},
title = {{A survey of program slicing techniques}},
url = {http://www.cse.buffalo.edu/LRG/CSE605/Papers/slicing-survey-tip.pdf},
year = {1995}
}
@article{Jensen2009,
author = {Jensen, SH and M{\o}ller, A and Thiemann, P},
file = {:home/etn/Documents/PhD/Biblio/Jensen, M{\o}ller, Thiemann - 2009 - Type analysis for JavaScript.pdf:pdf},
journal = {Static Analysis},
title = {{Type analysis for JavaScript}},
url = {http://link.springer.com/chapter/10.1007/978-3-642-03237-0{\_}17},
year = {2009}
}
@article{Jensen2011,
author = {Jensen, SH and Madsen, M and M{\o}ller, A},
file = {:home/etn/Documents/PhD/Biblio/Jensen, Madsen, M{\o}ller - 2011 - Modeling the HTML DOM and browser API in static analysis of JavaScript web applications.pdf:pdf},
journal = {{\ldots}  of the 19th ACM SIGSOFT symposium {\ldots}},
title = {{Modeling the HTML DOM and browser API in static analysis of JavaScript web applications}},
url = {http://dl.acm.org/citation.cfm?id=2025125},
year = {2011}
}
@article{Hackett2012,
author = {Hackett, B and Guo, S},
file = {:home/etn/Documents/PhD/Biblio/Hackett, Guo - 2012 - Fast and precise hybrid type inference for JavaScript.pdf:pdf},
journal = {ACM SIGPLAN Notices},
title = {{Fast and precise hybrid type inference for JavaScript}},
url = {http://dl.acm.org/citation.cfm?id=2254094},
year = {2012}
}
@article{Logozzo2010,
author = {Logozzo, F and Venter, H},
file = {:home/etn/Documents/PhD/Biblio/Logozzo, Venter - 2010 - RATA rapid atomic type analysis by abstract interpretation–application to javascript optimization.pdf:pdf},
journal = {Compiler Construction},
title = {{RATA: rapid atomic type analysis by abstract interpretation–application to javascript optimization}},
url = {http://link.springer.com/chapter/10.1007/978-3-642-11970-5{\_}5},
year = {2010}
}
@article{Abramsky1987,
author = {Abramsky, S and Hankin, C},
file = {:home/etn/Documents/PhD/Biblio/Abramsky, Hankin - 1987 - An introduction to abstract interpretation.pdf:pdf},
journal = {Abstract Interpretation of declarative {\ldots}},
title = {{An introduction to abstract interpretation}},
url = {https://www.ursuletz.com/{~}weimer/2006-615/reading/AbramskiAI.pdf},
year = {1987}
}
@article{Cousot1979,
author = {Cousot, P and Cousot, R},
file = {:home/etn/Documents/PhD/Biblio/Cousot, Cousot - 1979 - Systematic design of program analysis frameworks.pdf:pdf},
journal = {Proceedings of the 6th ACM SIGACT-SIGPLAN  {\ldots}},
title = {{Systematic design of program analysis frameworks}},
url = {http://dl.acm.org/citation.cfm?id=567778},
year = {1979}
}
@article{Cousot1977,
author = {Cousot, P and Cousot, R},
file = {:home/etn/Documents/PhD/Biblio/Cousot, Cousot - 1977 - Abstract interpretation a unified lattice model for static analysis of programs by construction or approximation.pdf:pdf},
journal = {Proceedings of the 4th ACM SIGACT-SIGPLAN {\ldots}},
title = {{Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints}},
url = {http://dl.acm.org/citation.cfm?id=512973},
year = {1977}
}
@article{Thiemann2005,
author = {Thiemann, P},
file = {:home/etn/Documents/PhD/Biblio/Thiemann - 2005 - Towards a type system for analyzing javascript programs.pdf:pdf},
journal = {Programming Languages and Systems},
title = {{Towards a type system for analyzing javascript programs}},
url = {http://link.springer.com/chapter/10.1007/978-3-540-31987-0{\_}28},
year = {2005}
}
@article{Furr2009,
author = {Furr, M and An, JD and Foster, JS and Hicks, M},
file = {:home/etn/Documents/PhD/Biblio/Furr et al. - 2009 - Static type inference for Ruby.pdf:pdf},
journal = {{\ldots}  of the 2009 ACM symposium on  {\ldots}},
title = {{Static type inference for Ruby}},
url = {http://dl.acm.org/citation.cfm?id=1529700},
year = {2009}
}
@article{Anderson2005,
author = {Anderson, C and Giannini, P and Drossopoulou, S},
file = {:home/etn/Documents/PhD/Biblio/Anderson, Giannini, Drossopoulou - 2005 - Towards type inference for JavaScript.pdf:pdf},
journal = {ECOOP 2005-Object-Oriented  {\ldots}},
title = {{Towards type inference for JavaScript}},
url = {http://link.springer.com/chapter/10.1007/11531142{\_}19},
year = {2005}
}
@article{Aiken1993,
author = {Aiken, A and Wimmers, EL},
file = {:home/etn/Documents/PhD/Biblio/Aiken, Wimmers - 1993 - Type inclusion constraints and type inference.ps:ps},
journal = {Proceedings of the conference on Functional {\ldots}},
title = {{Type inclusion constraints and type inference}},
url = {http://dl.acm.org/citation.cfm?id=165188},
year = {1993}
}
@article{Aiken1991,
author = {Aiken, A and Murphy, B},
file = {:home/etn/Documents/PhD/Biblio/Aiken, Murphy - 1991 - Static type inference in a dynamically typed language.pdf:pdf},
journal = {Proceedings of the 18th ACM SIGPLAN-SIGACT  {\ldots}},
title = {{Static type inference in a dynamically typed language}},
url = {http://dl.acm.org/citation.cfm?id=99621},
year = {1991}
}
@article{Agesen1995,
author = {Agesen, O and H{\"{o}}lzle, U},
file = {:home/etn/Documents/PhD/Biblio/Agesen, H{\"{o}}lzle - 1995 - Type feedback vs. concrete type inference A comparison of optimization techniques for object-oriented languages.pdf:pdf},
journal = {ACM SIGPLAN Notices},
title = {{Type feedback vs. concrete type inference: A comparison of optimization techniques for object-oriented languages}},
url = {http://dl.acm.org/citation.cfm?id=217847},
year = {1995}
}
@article{Agesen1994,
author = {Agesen, O},
file = {:home/etn/Documents/PhD/Biblio/Agesen - 1994 - Constraint-based type inference and parametric polymorphism.pdf:pdf},
journal = {Static Analysis},
title = {{Constraint-based type inference and parametric polymorphism}},
url = {http://link.springer.com/chapter/10.1007/3-540-58485-4{\_}34},
year = {1994}
}
@article{Andersen1994,
author = {Andersen, LO},
file = {:home/etn/Documents/PhD/Biblio/Andersen - 1994 - Program analysis and specialization for the C programming language.pdf:pdf},
title = {{Program analysis and specialization for the C programming language}},
url = {http://www-ti.informatik.uni-tuebingen.de/{~}behrend/PaperSeminar/Program Analysis and SpecializationPhD.pdf},
year = {1994}
}
@article{Gardner2012,
author = {Gardner, PA and Maffeis, S and Smith, GD},
file = {:home/etn/Documents/PhD/Biblio/Gardner, Maffeis, Smith - 2012 - Towards a program logic for JavaScript.pdf:pdf},
journal = {ACM SIGPLAN Notices},
title = {{Towards a program logic for JavaScript}},
url = {http://dl.acm.org/citation.cfm?id=2103663},
year = {2012}
}
@article{Maffeis2008,
author = {Maffeis, S and Mitchell, JC and Taly, A},
file = {:home/etn/Documents/PhD/Biblio/Maffeis, Mitchell, Taly - 2008 - An operational semantics for JavaScript.pdf:pdf},
journal = {Programming languages and systems},
title = {{An operational semantics for JavaScript}},
url = {http://link.springer.com/chapter/10.1007/978-3-540-89330-1{\_}22},
year = {2008}
}
@article{Richards2010,
author = {Richards, G and Lebresne, S and Burg, B and Vitek, J},
file = {:home/etn/Documents/PhD/Biblio/Richards et al. - 2010 - An analysis of the dynamic behavior of JavaScript programs.pdf:pdf},
journal = {ACM Sigplan Notices},
title = {{An analysis of the dynamic behavior of JavaScript programs}},
url = {http://dl.acm.org/citation.cfm?id=1806598},
year = {2010}
}
@article{Sridharan2009,
author = {Sridharan, M and Fink, SJ},
file = {:home/etn/Documents/PhD/Biblio/Sridharan, Fink - 2009 - The complexity of Andersen's analysis in practice.pdf:pdf},
journal = {Static Analysis},
title = {{The complexity of Andersen's analysis in practice}},
url = {http://link.springer.com/chapter/10.1007/978-3-642-03237-0{\_}15},
year = {2009}
}
@article{Jensen2012,
author = {Jensen, SH and Jonsson, PA and M{\o}ller, A},
file = {:home/etn/Documents/PhD/Biblio/Jensen, Jonsson, M{\o}ller - 2012 - Remedying the eval that men do.pdf:pdf},
journal = {Proceedings of the 2012  {\ldots}},
title = {{Remedying the eval that men do}},
url = {http://dl.acm.org/citation.cfm?id=2336758},
year = {2012}
}
@article{Richards2011,
author = {Richards, G and Hammer, C and Burg, B and Vitek, J},
file = {:home/etn/Documents/PhD/Biblio/Richards et al. - 2011 - The eval that men do.pdf:pdf},
journal = {ECOOP 2011–Object-Oriented  {\ldots}},
title = {{The eval that men do}},
url = {http://link.springer.com/chapter/10.1007/978-3-642-22655-7{\_}4},
year = {2011}
}
@article{Kam1977,
author = {Kam, JB and Ullman, JD},
file = {:home/etn/Documents/PhD/Biblio/Kam, Ullman - 1977 - Monotone data flow analysis frameworks.pdf:pdf},
journal = {Acta Informatica},
title = {{Monotone data flow analysis frameworks}},
url = {http://link.springer.com/article/10.1007/BF00290339},
year = {1977}
}
@article{Jang2009,
abstract = {JavaScript is widely used by web developers and the complexity of JavaScript programs has increased over the last year. Therefore, the need for program analysis for JavaScript is evident. Points-to analysis for JavaScript is to determine the set of objects to which a reference variable or an object property may point. Points-to analysis for JavaScript is a basis for further program analyses for JavaScript. It has a wide range of applications in code optimization and software engineering tools. However, points-to analysis for JavaScript has not yet been developed. JavaScript has dynamic features such as the runtime modification of objects through addition of properties or updating of methods. We propose a points-to analysis for JavaScript which precisely handles the dynamic features of JavaScript. Our work is the first attempt to analyze the points-to behavior of JavaScript. We evaluate the analysis on a set of JavaScript programs. We also apply the analysis to a code optimization technique to show that the analysis can be practically useful. Copyright 2009 ACM.},
author = {Jang, Dongseok and Choe, Kwang-Moo},
doi = {10.1145/1529282.1529711},
file = {:home/etn/Documents/PhD/Biblio/Jang, Choe - 2009 - Points-to analysis for JavaScript.pdf:pdf},
isbn = {9781605581668},
journal = {Proceedings of the 2009 ACM symposium on Applied Computing SAC 09},
keywords = {cen,education,engineering research,javascript,korea ministry,pointer analysis,points analysis,program anal,ter excellence program,work supported},
pages = {1930},
title = {{Points-to analysis for JavaScript}},
url = {http://dl.acm.org/citation.cfm?id=1529711 http://portal.acm.org/citation.cfm?doid=1529282.1529711},
year = {2009}
}
@article{Wei2014,
author = {Wei, S and Ryder, BG},
journal = {ECOOP 2014–Object-Oriented Programming},
title = {{State-sensitive points-to analysis for the dynamic behavior of JavaScript objects}},
url = {http://link.springer.com/chapter/10.1007/978-3-662-44202-9{\_}1},
year = {2014}
}
@article{Gardner2013,
author = {Gardner, P and Smith, G},
file = {:home/etn/Documents/PhD/Biblio/Gardner, Smith - 2013 - JuS Squeezing the sense out of javascript programs.pdf:pdf},
journal = {JSTools@ ECOOP},
title = {{JuS: Squeezing the sense out of javascript programs}},
url = {https://csl.cs.uni-saarland.de/jstools/2013/JuS.pdf},
year = {2013}
}
@article{Bodin2014,
author = {Bodin, M and Chargu{\'{e}}raud, A},
file = {:home/etn/Documents/PhD/Biblio/Bodin, Chargu{\'{e}}raud - 2014 - A trusted mechanised JavaSript specification.pdf:pdf},
journal = {Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
title = {{A trusted mechanised JavaSript specification}},
url = {http://dl.acm.org/citation.cfm?id=2535876},
year = {2014}
}
@article{Maffeis2009a,
author = {Maffeis, S and Mitchell, JC and Taly, A},
file = {:home/etn/Documents/PhD/Biblio/Maffeis, Mitchell, Taly - 2009 - Isolating JavaScript with filters, rewriting, and wrappers.pdf:pdf},
journal = {Computer Security–ESORICS 2009},
title = {{Isolating JavaScript with filters, rewriting, and wrappers}},
url = {http://link.springer.com/chapter/10.1007/978-3-642-04444-1{\_}31},
year = {2009}
}
@article{Maffeis2009,
author = {Maffeis, S and Taly, A},
file = {:home/etn/Documents/PhD/Biblio/Maffeis, Taly - 2009 - Language-based isolation of untrusted Javascript.pdf:pdf},
journal = {{\ldots}  Symposium, 2009. CSF'09. 22nd IEEE},
title = {{Language-based isolation of untrusted Javascript}},
url = {http://ieeexplore.ieee.org/xpls/abs{\_}all.jsp?arnumber=5230484},
year = {2009}
}
@article{Smith2011,
author = {Smith, GD},
file = {:home/etn/Documents/PhD/Biblio/Smith - 2011 - Local reasoning about web programs.pdf:pdf},
title = {{Local reasoning about web programs}},
url = {https://www.doc.ic.ac.uk/{~}pg/papers/Gareth{\_}Smith{\_}Thesis.pdf},
year = {2011}
}
@article{Disney2014,
author = {Disney, T and Faubion, N},
file = {:home/etn/Documents/PhD/Biblio/Disney, Faubion - 2014 - Sweeten your JavaScript hygienic macros for ES5.pdf:pdf},
journal = {Proceedings of the 10th {\ldots}},
title = {{Sweeten your JavaScript: hygienic macros for ES5}},
url = {http://dl.acm.org/citation.cfm?id=2661097},
year = {2014}
}
@article{Plotkin1981,
author = {Plotkin, GD},
file = {:home/etn/Documents/PhD/Biblio/Plotkin - 1981 - A structural approach to operational semantics.pdf:pdf},
title = {{A structural approach to operational semantics}},
url = {https://www.alice.virginia.edu/{~}weimer/2006-655/reading/plotkin81structural.pdf},
year = {1981}
}
@article{Andreasen,
author = {Andreasen, E and Feldthaus, A and Jensen, SH},
file = {:home/etn/Documents/PhD/Biblio/Andreasen, Feldthaus, Jensen - Unknown - Improving Tools for JavaScript Programmers.pdf:pdf},
journal = {users-cs.au.dk},
title = {{Improving Tools for JavaScript Programmers}},
url = {http://users-cs.au.dk/amoeller/papers/stop/paper.pdf}
}
@article{OHearn2001,
author = {O'Hearn, P and Reynolds, J and Yang, H},
file = {:home/etn/Documents/PhD/Biblio/O'Hearn, Reynolds, Yang - 2001 - Local reasoning about programs that alter data structures.pdf:pdf},
journal = {Computer science logic},
title = {{Local reasoning about programs that alter data structures}},
url = {http://link.springer.com/chapter/10.1007/3-540-44802-0{\_}1},
year = {2001}
}
@article{Hankin1999,
author = {Hankin, C and Nielson, F and Nielson, HR},
file = {:home/etn/Documents/PhD/Biblio/Hankin, Nielson, Nielson - 1999 - Principles of Program Analysis.pdf:pdf},
title = {{Principles of Program Analysis}},
url = {http://www.tcs.informatik.uni-muenchen.de/{~}mhofmann/appsem2/LectureNotes/Hankin-handout.pdf},
year = {1999}
}
@article{Guha2011,
author = {Guha, A and Saftoiu, C and Krishnamurthi, S},
file = {:home/etn/Documents/PhD/Biblio/Guha, Saftoiu, Krishnamurthi - 2011 - Typing local control and state using flow analysis.pdf:pdf},
journal = {Programming Languages and  {\ldots}},
title = {{Typing local control and state using flow analysis}},
url = {http://link.springer.com/chapter/10.1007/978-3-642-19718-5{\_}14},
year = {2011}
}
@phdthesis{Shivers1991,
abstract = {Programswritten in powerful, higher-order languages like Scheme,ML, and CommonLisp should run as fast as their FORTRAN and C counterparts. They should, but they don't. A major reason is the level of optimisation applied to these two classes of languages. Many FORTRAN and C compilers employ an arsenal of sophisticated global optimisations that depend upon data-flow analysis: common-subexpression elimination, loop-invariant detection, induction-variable elimination, and many, many more. Compilers for higher- order languages do not provide these optimisations. Without them, Scheme, LISP and ML compilers are doomed to produce code that runs slower than their FORTRAN and C counterparts. The problem is the lack of an explicit control-flow graph at compile time, somethingwhich traditional data-flow analysis techniques require. In this dissertation, I present a technique for recovering the control-flowgraph of aScheme programat compile time. I give examples of how this information can be used to perform several data-flow analysis optimisations, including copy propagation, induction-variable elimination, useless-variable elimination, and type recovery. The analysis is defined in termsof a non-standard semantic interpretation. The denotational semantics is carefully developed, and several theorems establishing the correctness of the semantics and the implementing algorithms are proven.},
author = {Shivers, O.},
booktitle = {Contract},
number = {May},
pages = {1--186},
title = {{Control-flow analysis of higher-order languages}},
url = {http://www.ccs.neu.edu/home/shivers/papers/diss.pdf http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.9.3971{\&}rep=rep1{\&}type=pdf},
year = {1991}
}
@article{Allen1970,
author = {Allen, Frances E.},
doi = {10.1145/390013.808479},
issn = {03621340},
journal = {ACM SIGPLAN Notices},
month = {jul},
number = {7},
pages = {1--19},
publisher = {ACM},
title = {{Control flow analysis}},
url = {http://dl.acm.org/citation.cfm?id=390013.808479},
volume = {5},
year = {1970}
}
@article{Raychev2013,
abstract = {Like shared-memory multi-threaded programs, event-driven programs such as client-side web applications are susceptible to data races that are hard to reproduce and debug. Race detection for such programs is hampered by their pervasive use of ad hoc synchronization, which can lead to a prohibitive number of false positives. Race detection also faces a scalability challenge, as a large number of short-running event handlers can quickly overwhelm standard vector-clock-based techniques. This paper presents several novel contributions that address both of these challenges. First, we introduce race coverage, a systematic method for exposing ad hoc synchronization and other (potentially harmful) races to the user, significantly reducing false positives. Second, we present an efficient connectivity algorithm for computing race coverage. The algorithm is based on chain decomposition and leverages the structure of event-driven programs to dramatically decrease the overhead of vector clocks. We implemented our techniques in a tool called EventRacer and evaluated it on a number of public web sites. The results indicate substantial performance and precision improvements of our approach over the state-of-the-art. Using EventRacer, we found many harmful races, most of which are beyond the reach of current techniques.},
author = {Raychev, Veselin and Vechev, Martin and Sridharan, Manu},
doi = {10.1145/2544173.2509538},
file = {:home/etn/Documents/PhD/Biblio/Raychev, Vechev, Sridharan - 2013 - Effective Race Detection for Event-driven Programs.pdf:pdf},
isbn = {978-1-4503-2374-1},
issn = {0362-1340},
journal = {SIGPLAN Not.},
keywords = {asynchrony,concurrency,nondeterminism,race detection,web},
month = {nov},
number = {10},
pages = {151--166},
publisher = {ACM},
title = {{Effective Race Detection for Event-driven Programs}},
url = {http://dl.acm.org/citation.cfm?id=2544173.2509538 http://doi.acm.org/10.1145/2544173.2509538},
volume = {48},
year = {2013}
}
