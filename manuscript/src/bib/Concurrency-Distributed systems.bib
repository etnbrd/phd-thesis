Automatically generated by Mendeley Desktop 1.16-dev1
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@inproceedings{Dean2008,
abstract = {MapReduce is a programming model and an associated implementation for processing and generating large data sets. Users specify a map function that processes a key/value pair to generate a set of intermediate key/value pairs, and a reduce function that merges all intermediate values associated with the same intermediate key. Many real world tasks are expressible in this model, as shown in the paper. Programs written in this functional style are automatically parallelized and executed on a large cluster of commodity machines. The run-time system takes care of the details of partitioning the input data, scheduling the program’s execution across a set of machines, handling machine failures, and managing the required inter-machine communication. This allows programmers without any experience with parallel and distributed systems to easily utilize the resources of a large distributed system. Our implementation of MapReduce runs on a large cluster of commodity machines and is highly scalable: a typical MapReduce computation processes many terabytes of data on thousands of machines. Programmers find the system easy to use: hundreds of MapReduce programs have been implemented and upwards of one thousand MapReduce jobs are executed on Google’s clusters every day.},
archivePrefix = {arXiv},
arxivId = {10.1.1.163.5292},
author = {Dean, Jeffrey and Ghemawat, Sanjay},
booktitle = {Proc. of the OSDI - Symp. on Operating Systems Design and Implementation},
doi = {10.1145/1327452.1327492},
eprint = {10.1.1.163.5292},
file = {:home/etn/Documents/PhD/Biblio/Dean, Ghemawat - 2004 - MapReduce Simplified Data Processing on Large Clusters.pdf:pdf},
isbn = {9781595936868},
issn = {00010782},
number = {1},
pages = {137--149},
pmid = {11687618},
title = {{MapReduce: Simplified Data Processing on Large Clusters}},
url = {http://dl.acm.org/citation.cfm?id=1327492 http://doi.acm.org/10.1145/1327452.1327492 http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=53CA72B524B9A6153BFE89FE26FBB832?doi=10.1.1.163.5292},
volume = {51},
year = {2004}
}
@article{Steen2007,
author = {Steen, Marteen Van and Tanenbaum, Andrew S},
journal = {Network},
title = {{Distributed Systems: principles and paradigms}},
url = {http://u.cs.biu.ac.il/{~}ariel/download/ds590/pdfs/notes.01.pdf},
year = {2007}
}
@article{Gilbert2002,
author = {Gilbert, S and Lynch, N},
file = {:home/etn/Documents/PhD/Biblio/Gilbert, Lynch - 2002 - Brewer's conjecture and the feasibility of consistent, available, partition-tolerant web services(2).pdf:pdf},
journal = {ACM SIGACT News},
title = {{Brewer's conjecture and the feasibility of consistent, available, partition-tolerant web services}},
url = {http://dl.acm.org/citation.cfm?id=564601},
year = {2002}
}
@article{DeCandia2007,
author = {DeCandia, G and Hastorun, D},
file = {:home/etn/Documents/PhD/Biblio/DeCandia, Hastorun - 2007 - Dynamo amazon's highly available key-value store.pdf:pdf},
journal = {ACM SIGOPS  {\ldots}},
title = {{Dynamo: amazon's highly available key-value store}},
url = {http://dl.acm.org/citation.cfm?id=1294281},
year = {2007}
}
@book{Fox1997,
author = {Fox, A and Gribble, SD and Chawathe, Y and Brewer, EA and Gauthier, P},
file = {:home/etn/Documents/PhD/Biblio/Fox et al. - 1997 - Cluster-based scalable network services.pdf:pdf},
title = {{Cluster-based scalable network services}},
url = {http://dl.acm.org/citation.cfm?id=266662},
year = {1997}
}
@article{Lamport1978,
author = {Lamport, L},
file = {:home/etn/Documents/PhD/Biblio/Lamport - 1978 - Time, clocks, and the ordering of events in a distributed system.pdf:pdf},
journal = {Communications of the ACM},
title = {{Time, clocks, and the ordering of events in a distributed system}},
url = {http://dl.acm.org/citation.cfm?id=359563},
year = {1978}
}
@article{Karger1997,
author = {Karger, D and Lehman, E and Leighton, T},
journal = {Proceedings of the  {\ldots}},
title = {{Consistent hashing and random trees: Distributed caching protocols for relieving hot spots on the World Wide Web}},
url = {http://dl.acm.org/citation.cfm?id=258660},
year = {1997}
}
@article{Lakshman2010,
author = {Lakshman, A and Malik, P},
journal = {ACM SIGOPS Operating Systems Review},
title = {{Cassandra: a decentralized structured storage system}},
url = {http://dl.acm.org/citation.cfm?id=1773922},
year = {2010}
}
@article{Chen2005,
author = {Chen, MK and Li, XF and Lian, R and Lin, JH and Liu, L},
file = {:home/etn/Documents/PhD/Biblio/Chen et al. - 2005 - Shangri-La achieving high performance from compiled network applications while enabling ease of programming.pdf:pdf},
journal = {ACM SIGPLAN  {\ldots}},
title = {{Shangri-La: achieving high performance from compiled network applications while enabling ease of programming}},
url = {http://dl.acm.org/citation.cfm?id=1065038},
year = {2005}
}
@article{Ongaro2014,
author = {Ongaro, D and Ousterhout, J},
file = {:home/etn/Documents/PhD/Biblio/Ongaro, Ousterhout - 2014 - In search of an understandable consensus algorithm.pdf:pdf},
journal = {Proc. USENIX Annual Technical Conference},
keywords = {raft},
mendeley-tags = {raft},
title = {{In search of an understandable consensus algorithm}},
url = {https://www.usenix.org/system/files/conference/atc14/atc14-paper-ongaro.pdf},
year = {2014}
}
@article{Gilbert2012,
author = {Gilbert, S and Lynch, NA},
file = {:home/etn/Documents/PhD/Biblio/Gilbert, Lynch - 2012 - Perspectives on the CAP Theorem.pdf:pdf},
title = {{Perspectives on the CAP Theorem}},
url = {http://dspace.mit.edu/handle/1721.1/79112},
year = {2012}
}
@article{Gilbert2002a,
author = {Gilbert, Seth and Lynch, Nancy},
doi = {10.1145/564585.564601},
file = {:home/etn/Documents/PhD/Biblio/Gilbert, Lynch - 2002 - Brewer's conjecture and the feasibility of consistent, available, partition-tolerant web services(2).pdf:pdf},
issn = {01635700},
journal = {ACM SIGACT News},
keywords = {CAP},
mendeley-tags = {CAP},
month = {jun},
number = {2},
pages = {51},
publisher = {ACM},
title = {{Brewer's conjecture and the feasibility of consistent, available, partition-tolerant web services}},
url = {http://dl.acm.org/citation.cfm?id=564585.564601},
volume = {33},
year = {2002}
}
@article{Salmito2013,
author = {Salmito, Tiago and de Moura, Ana Lucia and Rodriguez, Noemi},
doi = {10.1109/ICPP.2013.80},
file = {:home/etn/Documents/PhD/Biblio/Salmito, Moura, Rodriguez - 2013 - A Flexible Approach to Staged Events.pdf:pdf},
isbn = {978-0-7695-5117-3},
issn = {0190-3918},
journal = {2013 42nd International Conference on Parallel Processing},
keywords = {-concurrency,event-driven,stages,threads},
language = {English},
month = {oct},
pages = {661--670},
publisher = {IEEE},
title = {{A Flexible Approach to Staged Events}},
url = {http://ieeexplore.ieee.org/articleDetails.jsp?arnumber=6687404 http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6687404},
year = {2013}
}
@article{Fu2001,
author = {Fu, X and Shi, W and Akkerman, A and Karamcheti, V},
file = {:home/etn/Documents/PhD/Biblio/Fu et al. - 2001 - CANS Composable, Adaptive Network Services Infrastructure.pdf:pdf},
journal = {USITS},
title = {{CANS: Composable, Adaptive Network Services Infrastructure.}},
url = {http://static.usenix.org/event/usits01/full{\_}papers/fu/fu.pdf},
year = {2001}
}
@article{Hansen1978,
author = {Hansen, Per Brinch},
doi = {10.1145/359642.359651},
file = {:home/etn/Documents/PhD/Biblio/Hansen - 1978 - Distributed processes a concurrent programming concept.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
keywords = {buffers,classes,concurrent programming,coroutines,distributed processes,guarded regions,input/output,microprocessor networks,monitors,nondeterminism,path expressions,process communication and scheduling,processes,programming languages,semaphores,sorting arrays},
month = {nov},
number = {11},
pages = {934--941},
publisher = {ACM},
title = {{Distributed processes: a concurrent programming concept}},
url = {http://dl.acm.org/citation.cfm?id=359642.359651},
volume = {21},
year = {1978}
}
@article{Lamport1982,
author = {Lamport, Leslie and Shostak, Robert and Pease, Marshall},
doi = {10.1145/357172.357176},
file = {:home/etn/Documents/PhD/Biblio/Lamport, Shostak, Pease - 1982 - The Byzantine Generals Problem.pdf:pdf},
issn = {01640925},
journal = {ACM Transactions on Programming Languages and Systems},
month = {jul},
number = {3},
pages = {382--401},
publisher = {ACM},
title = {{The Byzantine Generals Problem}},
url = {http://dl.acm.org/citation.cfm?id=357172.357176},
volume = {4},
year = {1982}
}
@book{Armstrong1993,
author = {Armstrong, Joe and Virding, Robert and Wikstrom, Claes and Williams, Mike},
file = {:home/etn/Documents/PhD/Biblio/Armstrong et al. - 1993 - Concurrent Programming in ERLANG.pdf:pdf},
title = {{Concurrent Programming in ERLANG}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.33.6333},
year = {1993}
}
@article{Stonebraker1986,
abstract = {There are three dominent themes in building high transaction rate multiprocessor systems, namely shared memory (e.g. Synapse, IBM/AP configurations), shared disk (e.g. VAX/cluster, any multi-ported disk system), and shared nothing (e.g. Tandem, Tolerant). This paper argues that shared nothing is the pre- ferred approach.},
author = {Stonebraker, Michael},
file = {:home/etn/Documents/PhD/Biblio/Stonebraker - 1986 - The Case for Shared Nothing.pdf:pdf},
issn = {09547762},
journal = {Contract},
number = {1},
pages = {1--5},
pmid = {8717696},
title = {{The Case for Shared Nothing}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.58.5370{\&}rep=rep1{\&}type=pdf http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.58.5370{\&}amp;rep=rep1{\&}amp;type=pdf},
volume = {9},
year = {1986}
}
@inproceedings{Nelson2004,
address = {New York, New York, USA},
author = {Nelson, Jay},
booktitle = {Proceedings of the 2004 ACM SIGPLAN workshop on Erlang - ERLANG '04},
doi = {10.1145/1022471.1022480},
file = {:home/etn/Documents/PhD/Biblio/Nelson - 2004 - Structured programming using processes.pdf:pdf},
isbn = {1581139187},
keywords = {COPL,Erlang,concurrency oriented programming language,erlang,inductive decomposition},
mendeley-tags = {Erlang},
month = {sep},
pages = {54--64},
publisher = {ACM Press},
title = {{Structured programming using processes}},
url = {http://dl.acm.org/citation.cfm?id=1022471.1022480},
year = {2004}
}
@inproceedings{Nystrom2003,
address = {New York, New York, USA},
author = {Nystr{\"{o}}m, J. H. and Trinder, P. W. and King, D. J.},
booktitle = {Proceedings of the 2003 ACM SIGPLAN workshop on Erlang - ERLANG '03},
doi = {10.1145/940880.940881},
isbn = {1581137729},
month = {aug},
pages = {1--7},
publisher = {ACM Press},
title = {{Evaluating distributed functional languages for telecommunications software}},
url = {http://dl.acm.org/citation.cfm?id=940880.940881},
year = {2003}
}
@incollection{Huang2008,
abstract = {The paradigm shift in processor design from monolithic processors to multicore has renewed interest in programming models that facilitate parallelism. While multicores are here today, the future is likely to witness architectures that use reconfigurable fabrics (FPGAs) as coprocessors. FPGAs provide an unmatched ability to tailor their circuitry per application, leading to better performance at lower power. Unfortunately, the skills required to program FPGAs are beyond the expertise of skilled software programmers. This paper shows how to bridge the gap between programming software vs. hardware. We introduce Lime, a new Object-Oriented language that can be compiled for the JVM or into a synthesizable hardware description language. Lime extends Java with features that provide a way to carry OO concepts into efficient hardware. We detail an end-to-end system from the language down to hardware synthesis and demonstrate a Lime program running on both a conventional processor and in an FPGA.},
author = {Huang, Shan and Hormati, Amir and Bacon, David and Rabbah, Rodric},
booktitle = {ECOOP 2008 – Object-Oriented Programming},
doi = {10.1007/978-3-540-70592-5{\_}5},
isbn = {3540705910},
issn = {03029743},
pages = {76--103},
title = {{Liquid Metal: Object-Oriented Programming Across the Hardware/Software Boundary}},
url = {http://freeflygeek.com/docs/ssh-ecoop08.pdf http://www.springerlink.com/content/d7551q3k7078g43v},
year = {2008}
}
@article{Han2009,
abstract = {We propose a new design for Master-Worker network computing systems, called the Master-Worker event driven architecture (MEDA). MEDA is an extension of staged event driven architecture and designed for the goal to meet the dynamic demand of Master-Worker model network computing systems, with support for high concurrency, adaptive resources management and modular construction. In MEDA, applications consist of a network of event-driven stages connected by queues. MEDA makes use of a set of dynamic control mechanisms for automatic tuning and load conditioning. Queuing theory is used for thread management mechanism. Application field extends from stand-alone environment to the wide area network environment through the introduction of network queue. Delay event queue realizes the balance of performance and resource consumption. Priority queue expands the availability of job scheduling strategy and improves system efficiency. From experiments of Drug Discovery Grid, these results show that MEDA systems exhibit higher performance, better reliability than Master-Worker network computing system developed using traditional design.},
author = {Han, Biao and Luan, Zhongzhi and Zhu, Danfeng and Ren, Yinan and Chen, Ting and Wang, Yongjian and Wu, Zhongxin},
doi = {10.1109/CYBERC.2009.5342202},
isbn = {9781424452187},
journal = {CyberC 2009 - International Conference on Cyber-Enabled Distributed Computing and Knowledge Discovery},
keywords = {Drug Discovery Grid,Dynamic resource control,Master-worker paradigm,Staged event driven architecture},
language = {English},
month = {oct},
number = {i},
pages = {184--190},
publisher = {IEEE},
title = {{An improved staged event driven architecture for master-worker network computing}},
url = {http://ieeexplore.ieee.org/articleDetails.jsp?arnumber=5342202},
year = {2009}
}
