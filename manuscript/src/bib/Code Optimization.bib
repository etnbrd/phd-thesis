Automatically generated by Mendeley Desktop 1.16-dev1
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Catanzaro2009,
abstract = {Parallel programming must be accessible to domain experts without requiring them to become experts in parallel hardware architecture. While domain experts today prefer to use high-level “productivity” scripting languages with domain-appropriate abstractions, achieving high performance still requires expertise in lower-level “efficiency” lan- guages (CUDA, CILK, C with OpenMP) that expose hardware-level programming models directly. We bridge this gap through the use of embedded just-in-time specialization: domain experts write in high-level scripting languages, but at runtime, we specialize (generate, compile, and execute efficiency-language source code for) an application-specific and platform-specific subset of the productivity language. This enables invisible and selective optimization of only those application-level abstractions that enjoy a large performance advantage when expressed in an efficiency lan- guage on the available hardware and will be executed many times, amortizing the overhead of specialization. Because the specialization machinery is implemented in the productivity language, efficiency programmers can easily extend our system by adding new specializers for specific additional domain abstractions or new hardware, transparently to the productivity-language programmers. Our approach results in competitive performance on real applications with a fraction of the programming effort on the part of the domain expert. We argue that the separation of concerns enabled by embedded JIT specialization allows research to proceed in parallel on both the productivity and efficiency layers, and is therefore uniquely suited to the problem of making different parallel hardware architectures more accessible to domain-expert programmers with a fraction of the programmer time and effort.},
author = {Catanzaro, Bryan and Kamil, Shoaib and Lee, Yunsup},
doi = {10.1.1.212.6088},
file = {:home/etn/Documents/PhD/Biblio/Catanzaro, Kamil, Lee - 2009 - SEJITS Getting productivity and performance with selective embedded JIT specialization.pdf:pdf},
isbn = {978-0-9825442-3-5},
journal = {{\ldots} Models for Emerging {\ldots}},
pages = {1--10},
pmid = {8401072916273492945},
title = {{SEJITS: Getting productivity and performance with selective embedded JIT specialization}},
url = {http://www.eecs.berkeley.edu/{~}krste/papers/SEJITS-pmea2009.pdf http://citeseerx.ist.psu.edu/viewdoc/download?rep=rep1{\&}type=pdf{\&}doi=10.1.1.212.6088$\backslash$nhttp://www.eecs.berkeley.edu/Pubs/TechRpts/2010/EECS-2010-23.pdf},
year = {2009}
}
@article{Engler1994,
abstract = {Dynamic code generation allows aggressive optimization through the use of runtime information. Previous systems typically relied on ad hoc code generators that were not designed for retargetability, and did not shield the client from machine-specific details. We present a system, dcg, that allows clients to specify dynamically generated code in a machine-independent manner. Our one-pass code generator is easily retargeted and extremely efficient (code generation costs approximately 350 instructions per generated instruction). Experiments show that dynamic code generation increases some application speeds by over an order of magnitude.},
author = {Engler, Dawson R. and Proebsting, Todd A.},
doi = {10.1145/381792.195567},
file = {:home/etn/Documents/PhD/Biblio/Engler, Proebsting - 1994 - DCG.pdf:pdf},
isbn = {0-89791-660-3},
issn = {01635980},
journal = {ACM SIGOPS Operating Systems Review},
month = {dec},
number = {5},
pages = {263--272},
publisher = {ACM},
title = {{DCG}},
url = {http://dl.acm.org/citation.cfm?id=381792.195567 http://dl.acm.org/citation.cfm?id=381792.195567$\backslash$nhttp://portal.acm.org/citation.cfm?doid=381792.195567$\backslash$nhttp://portal.acm.org/citation.cfm?doid=381792.195567},
volume = {28},
year = {1994}
}
